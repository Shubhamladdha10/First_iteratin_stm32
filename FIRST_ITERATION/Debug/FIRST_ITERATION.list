
FIRST_ITERATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005600  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080057f4  080057f4  000157f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005874  08005874  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005874  08005874  00015874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800587c  0800587c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800587c  0800587c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005880  08005880  00015880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  2000000c  08005890  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08005890  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fd2  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000326e  00000000  00000000  0003a014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  0003d288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0003e7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d59f  00000000  00000000  0003fc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001676f  00000000  00000000  0006d1cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126cf9  00000000  00000000  0008393e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001aa637  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b90  00000000  00000000  001aa68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	080057dc 	.word	0x080057dc

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	080057dc 	.word	0x080057dc

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b980 	b.w	800054c <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	4688      	mov	r8, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 8084 	bne.w	800037c <__udivmoddi4+0x118>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d943      	bls.n	8000302 <__udivmoddi4+0x9e>
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	b142      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 8000280:	f1c2 0020 	rsb	r0, r2, #32
 8000284:	4091      	lsls	r1, r2
 8000286:	4097      	lsls	r7, r2
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4094      	lsls	r4, r2
 800028e:	ea40 0801 	orr.w	r8, r0, r1
 8000292:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	fa1f fe87 	uxth.w	lr, r7
 800029c:	fbb8 f6fc 	udiv	r6, r8, ip
 80002a0:	fb0c 8116 	mls	r1, ip, r6, r8
 80002a4:	fb06 f00e 	mul.w	r0, r6, lr
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	4298      	cmp	r0, r3
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	f106 31ff 	add.w	r1, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4298      	cmp	r0, r3
 80002ba:	f200 8131 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002be:	460e      	mov	r6, r1
 80002c0:	1a19      	subs	r1, r3, r0
 80002c2:	b2a3      	uxth	r3, r4
 80002c4:	fbb1 f0fc 	udiv	r0, r1, ip
 80002c8:	fb0c 1110 	mls	r1, ip, r0, r1
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0x84>
 80002d8:	193c      	adds	r4, r7, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x82>
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	f200 811a 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80002e6:	4618      	mov	r0, r3
 80002e8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ec:	eba4 040e 	sub.w	r4, r4, lr
 80002f0:	2600      	movs	r6, #0
 80002f2:	b11d      	cbz	r5, 80002fc <__udivmoddi4+0x98>
 80002f4:	40d4      	lsrs	r4, r2
 80002f6:	2300      	movs	r3, #0
 80002f8:	e9c5 4300 	strd	r4, r3, [r5]
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xa2>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	2a00      	cmp	r2, #0
 800030c:	d152      	bne.n	80003b4 <__udivmoddi4+0x150>
 800030e:	1bcb      	subs	r3, r1, r7
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f f887 	uxth.w	r8, r7
 8000318:	2601      	movs	r6, #1
 800031a:	0c21      	lsrs	r1, r4, #16
 800031c:	fbb3 fcfe 	udiv	ip, r3, lr
 8000320:	fb0e 301c 	mls	r0, lr, ip, r3
 8000324:	fb08 f90c 	mul.w	r9, r8, ip
 8000328:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800032c:	4589      	cmp	r9, r1
 800032e:	d90b      	bls.n	8000348 <__udivmoddi4+0xe4>
 8000330:	1879      	adds	r1, r7, r1
 8000332:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000336:	bf2c      	ite	cs
 8000338:	2001      	movcs	r0, #1
 800033a:	2000      	movcc	r0, #0
 800033c:	4589      	cmp	r9, r1
 800033e:	d902      	bls.n	8000346 <__udivmoddi4+0xe2>
 8000340:	2800      	cmp	r0, #0
 8000342:	f000 80f0 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000346:	469c      	mov	ip, r3
 8000348:	eba1 0109 	sub.w	r1, r1, r9
 800034c:	b2a3      	uxth	r3, r4
 800034e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000352:	fb0e 1110 	mls	r1, lr, r0, r1
 8000356:	fb08 f800 	mul.w	r8, r8, r0
 800035a:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035e:	45a0      	cmp	r8, r4
 8000360:	d907      	bls.n	8000372 <__udivmoddi4+0x10e>
 8000362:	193c      	adds	r4, r7, r4
 8000364:	f100 33ff 	add.w	r3, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x10c>
 800036a:	45a0      	cmp	r8, r4
 800036c:	f200 80d2 	bhi.w	8000514 <__udivmoddi4+0x2b0>
 8000370:	4618      	mov	r0, r3
 8000372:	eba4 0408 	sub.w	r4, r4, r8
 8000376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037a:	e7ba      	b.n	80002f2 <__udivmoddi4+0x8e>
 800037c:	428b      	cmp	r3, r1
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x130>
 8000380:	2d00      	cmp	r5, #0
 8000382:	f000 80be 	beq.w	8000502 <__udivmoddi4+0x29e>
 8000386:	2600      	movs	r6, #0
 8000388:	e9c5 0100 	strd	r0, r1, [r5]
 800038c:	4630      	mov	r0, r6
 800038e:	4631      	mov	r1, r6
 8000390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000394:	fab3 f683 	clz	r6, r3
 8000398:	2e00      	cmp	r6, #0
 800039a:	d14d      	bne.n	8000438 <__udivmoddi4+0x1d4>
 800039c:	428b      	cmp	r3, r1
 800039e:	f0c0 80b3 	bcc.w	8000508 <__udivmoddi4+0x2a4>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f240 80b0 	bls.w	8000508 <__udivmoddi4+0x2a4>
 80003a8:	4630      	mov	r0, r6
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0a6      	beq.n	80002fc <__udivmoddi4+0x98>
 80003ae:	e9c5 4800 	strd	r4, r8, [r5]
 80003b2:	e7a3      	b.n	80002fc <__udivmoddi4+0x98>
 80003b4:	4097      	lsls	r7, r2
 80003b6:	f1c2 0320 	rsb	r3, r2, #32
 80003ba:	fa01 f002 	lsl.w	r0, r1, r2
 80003be:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c2:	40d9      	lsrs	r1, r3
 80003c4:	fa24 f303 	lsr.w	r3, r4, r3
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	4094      	lsls	r4, r2
 80003ce:	4303      	orrs	r3, r0
 80003d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d4:	0c1e      	lsrs	r6, r3, #16
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 fc08 	mul.w	ip, r0, r8
 80003de:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 80003e2:	458c      	cmp	ip, r1
 80003e4:	d90e      	bls.n	8000404 <__udivmoddi4+0x1a0>
 80003e6:	1879      	adds	r1, r7, r1
 80003e8:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ec:	bf2c      	ite	cs
 80003ee:	f04f 0901 	movcs.w	r9, #1
 80003f2:	f04f 0900 	movcc.w	r9, #0
 80003f6:	458c      	cmp	ip, r1
 80003f8:	d903      	bls.n	8000402 <__udivmoddi4+0x19e>
 80003fa:	f1b9 0f00 	cmp.w	r9, #0
 80003fe:	f000 8096 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000402:	4630      	mov	r0, r6
 8000404:	eba1 010c 	sub.w	r1, r1, ip
 8000408:	b29b      	uxth	r3, r3
 800040a:	fbb1 f6fe 	udiv	r6, r1, lr
 800040e:	fb0e 1116 	mls	r1, lr, r6, r1
 8000412:	fb06 fc08 	mul.w	ip, r6, r8
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	458c      	cmp	ip, r1
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x1ca>
 800041e:	1879      	adds	r1, r7, r1
 8000420:	f106 33ff 	add.w	r3, r6, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x1c8>
 8000426:	458c      	cmp	ip, r1
 8000428:	f200 8088 	bhi.w	800053c <__udivmoddi4+0x2d8>
 800042c:	461e      	mov	r6, r3
 800042e:	eba1 030c 	sub.w	r3, r1, ip
 8000432:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000436:	e770      	b.n	800031a <__udivmoddi4+0xb6>
 8000438:	f1c6 0720 	rsb	r7, r6, #32
 800043c:	fa03 f406 	lsl.w	r4, r3, r6
 8000440:	fa02 fc06 	lsl.w	ip, r2, r6
 8000444:	fa01 fe06 	lsl.w	lr, r1, r6
 8000448:	40fa      	lsrs	r2, r7
 800044a:	fa20 f807 	lsr.w	r8, r0, r7
 800044e:	40f9      	lsrs	r1, r7
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	4322      	orrs	r2, r4
 8000456:	ea48 040e 	orr.w	r4, r8, lr
 800045a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800045e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000462:	fa1f f982 	uxth.w	r9, r2
 8000466:	fbb1 faf8 	udiv	sl, r1, r8
 800046a:	fb08 111a 	mls	r1, r8, sl, r1
 800046e:	fb0a f009 	mul.w	r0, sl, r9
 8000472:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8000476:	4570      	cmp	r0, lr
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x234>
 800047a:	eb12 0e0e 	adds.w	lr, r2, lr
 800047e:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000482:	bf2c      	ite	cs
 8000484:	f04f 0b01 	movcs.w	fp, #1
 8000488:	f04f 0b00 	movcc.w	fp, #0
 800048c:	4570      	cmp	r0, lr
 800048e:	d902      	bls.n	8000496 <__udivmoddi4+0x232>
 8000490:	f1bb 0f00 	cmp.w	fp, #0
 8000494:	d04e      	beq.n	8000534 <__udivmoddi4+0x2d0>
 8000496:	468a      	mov	sl, r1
 8000498:	ebae 0e00 	sub.w	lr, lr, r0
 800049c:	b2a4      	uxth	r4, r4
 800049e:	fbbe f0f8 	udiv	r0, lr, r8
 80004a2:	fb08 ee10 	mls	lr, r8, r0, lr
 80004a6:	fb00 f909 	mul.w	r9, r0, r9
 80004aa:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x25e>
 80004b2:	eb12 0e0e 	adds.w	lr, r2, lr
 80004b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ba:	d201      	bcs.n	80004c0 <__udivmoddi4+0x25c>
 80004bc:	45f1      	cmp	r9, lr
 80004be:	d840      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004c0:	4608      	mov	r0, r1
 80004c2:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80004c6:	ebae 0e09 	sub.w	lr, lr, r9
 80004ca:	fba0 890c 	umull	r8, r9, r0, ip
 80004ce:	45ce      	cmp	lr, r9
 80004d0:	4641      	mov	r1, r8
 80004d2:	464c      	mov	r4, r9
 80004d4:	d302      	bcc.n	80004dc <__udivmoddi4+0x278>
 80004d6:	d106      	bne.n	80004e6 <__udivmoddi4+0x282>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d204      	bcs.n	80004e6 <__udivmoddi4+0x282>
 80004dc:	3801      	subs	r0, #1
 80004de:	ebb8 010c 	subs.w	r1, r8, ip
 80004e2:	eb69 0402 	sbc.w	r4, r9, r2
 80004e6:	b37d      	cbz	r5, 8000548 <__udivmoddi4+0x2e4>
 80004e8:	1a5a      	subs	r2, r3, r1
 80004ea:	eb6e 0e04 	sbc.w	lr, lr, r4
 80004ee:	40f2      	lsrs	r2, r6
 80004f0:	fa0e f707 	lsl.w	r7, lr, r7
 80004f4:	fa2e f306 	lsr.w	r3, lr, r6
 80004f8:	2600      	movs	r6, #0
 80004fa:	4317      	orrs	r7, r2
 80004fc:	e9c5 7300 	strd	r7, r3, [r5]
 8000500:	e6fc      	b.n	80002fc <__udivmoddi4+0x98>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e6f9      	b.n	80002fc <__udivmoddi4+0x98>
 8000508:	1a84      	subs	r4, r0, r2
 800050a:	eb61 0103 	sbc.w	r1, r1, r3
 800050e:	2001      	movs	r0, #1
 8000510:	4688      	mov	r8, r1
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0x146>
 8000514:	3802      	subs	r0, #2
 8000516:	443c      	add	r4, r7
 8000518:	e72b      	b.n	8000372 <__udivmoddi4+0x10e>
 800051a:	3802      	subs	r0, #2
 800051c:	443c      	add	r4, r7
 800051e:	e6e3      	b.n	80002e8 <__udivmoddi4+0x84>
 8000520:	3e02      	subs	r6, #2
 8000522:	443b      	add	r3, r7
 8000524:	e6cc      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000526:	f1ac 0c02 	sub.w	ip, ip, #2
 800052a:	4439      	add	r1, r7
 800052c:	e70c      	b.n	8000348 <__udivmoddi4+0xe4>
 800052e:	3802      	subs	r0, #2
 8000530:	4439      	add	r1, r7
 8000532:	e767      	b.n	8000404 <__udivmoddi4+0x1a0>
 8000534:	f1aa 0a02 	sub.w	sl, sl, #2
 8000538:	4496      	add	lr, r2
 800053a:	e7ad      	b.n	8000498 <__udivmoddi4+0x234>
 800053c:	3e02      	subs	r6, #2
 800053e:	4439      	add	r1, r7
 8000540:	e775      	b.n	800042e <__udivmoddi4+0x1ca>
 8000542:	3802      	subs	r0, #2
 8000544:	4496      	add	lr, r2
 8000546:	e7bc      	b.n	80004c2 <__udivmoddi4+0x25e>
 8000548:	462e      	mov	r6, r5
 800054a:	e6d7      	b.n	80002fc <__udivmoddi4+0x98>

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000558:	4b08      	ldr	r3, [pc, #32]	; (800057c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800055c:	4907      	ldr	r1, [pc, #28]	; (800057c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4313      	orrs	r3, r2
 8000562:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000566:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4013      	ands	r3, r2
 800056c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056e:	68fb      	ldr	r3, [r7, #12]
}
 8000570:	bf00      	nop
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000

08000580 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <LL_APB1_GRP2_EnableClock+0x2c>)
 800058a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800058c:	4907      	ldr	r1, [pc, #28]	; (80005ac <LL_APB1_GRP2_EnableClock+0x2c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4313      	orrs	r3, r2
 8000592:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <LL_APB1_GRP2_EnableClock+0x2c>)
 8000596:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4013      	ands	r3, r2
 800059c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800059e:	68fb      	ldr	r3, [r7, #12]
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	40021000 	.word	0x40021000

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fd59 	bl	800106a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f81a 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 fa2c 	bl	8000a18 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c0:	f000 f878 	bl	80006b4 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 80005c4:	f000 f900 	bl	80007c8 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80005c8:	f000 f94c 	bl	8000864 <MX_RTC_Init>
  MX_UCPD1_Init();
 80005cc:	f000 f9c6 	bl	800095c <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80005d0:	f000 f9fa 	bl	80009c8 <MX_USB_PCD_Init>
  MX_ICACHE_Init();
 80005d4:	f000 f8e4 	bl	80007a0 <MX_ICACHE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	4804      	ldr	r0, [pc, #16]	; (80005ec <main+0x3c>)
 80005dc:	f002 f802 	bl	80025e4 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80005e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e4:	f000 fdb8 	bl	8001158 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 80005e8:	e7f6      	b.n	80005d8 <main+0x28>
 80005ea:	bf00      	nop
 80005ec:	42020400 	.word	0x42020400

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b098      	sub	sp, #96	; 0x60
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	2248      	movs	r2, #72	; 0x48
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f005 f8e4 	bl	80057cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000616:	f002 f95d 	bl	80028d4 <HAL_PWREx_ControlVoltageScaling>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000620:	f000 fa8e 	bl	8000b40 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000624:	f002 f938 	bl	8002898 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <SystemClock_Config+0xc0>)
 800062a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800062e:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <SystemClock_Config+0xc0>)
 8000630:	f023 0318 	bic.w	r3, r3, #24
 8000634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000638:	2326      	movs	r3, #38	; 0x26
 800063a:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800063c:	2381      	movs	r3, #129	; 0x81
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000646:	2301      	movs	r3, #1
 8000648:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2340      	movs	r3, #64	; 0x40
 800064c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 9;
 800065a:	2309      	movs	r3, #9
 800065c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065e:	2307      	movs	r3, #7
 8000660:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	4618      	mov	r0, r3
 8000670:	f002 f9c0 	bl	80029f4 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800067a:	f000 fa61 	bl	8000b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2303      	movs	r3, #3
 8000684:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2103      	movs	r1, #3
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fe8e 	bl	80033b8 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006a2:	f000 fa4d 	bl	8000b40 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3760      	adds	r7, #96	; 0x60
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40021000 	.word	0x40021000

080006b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
 80006d4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006d8:	4a2f      	ldr	r2, [pc, #188]	; (8000798 <MX_ADC1_Init+0xe4>)
 80006da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006dc:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e2:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f4:	4b27      	ldr	r3, [pc, #156]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006f6:	2204      	movs	r2, #4
 80006f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000700:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000702:	2200      	movs	r2, #0
 8000704:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000708:	2201      	movs	r2, #1
 800070a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_ADC1_Init+0xe0>)
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071a:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_ADC1_Init+0xe0>)
 800071c:	2200      	movs	r2, #0
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_ADC1_Init+0xe0>)
 800072a:	2200      	movs	r2, #0
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000730:	2200      	movs	r2, #0
 8000732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000736:	4817      	ldr	r0, [pc, #92]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000738:	f000 fed2 	bl	80014e0 <HAL_ADC_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000742:	f000 f9fd 	bl	8000b40 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4810      	ldr	r0, [pc, #64]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000752:	f001 fc27 	bl	8001fa4 <HAL_ADCEx_MultiModeConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800075c:	f000 f9f0 	bl	8000b40 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_ADC1_Init+0xe8>)
 8000762:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000764:	2306      	movs	r3, #6
 8000766:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800076c:	237f      	movs	r3, #127	; 0x7f
 800076e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000770:	2304      	movs	r3, #4
 8000772:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_ADC1_Init+0xe0>)
 800077e:	f001 f801 	bl	8001784 <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000788:	f000 f9da 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000b8 	.word	0x200000b8
 8000798:	42028000 	.word	0x42028000
 800079c:	0c900008 	.word	0x0c900008

080007a0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_Init 1 */

  /* USER CODE END ICACHE_Init 1 */
  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80007a4:	2000      	movs	r0, #0
 80007a6:	f001 ff37 	bl	8002618 <HAL_ICACHE_ConfigAssociativityMode>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80007b0:	f000 f9c6 	bl	8000b40 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80007b4:	f001 ff50 	bl	8002658 <HAL_ICACHE_Enable>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80007be:	f000 f9bf 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007ce:	4a23      	ldr	r2, [pc, #140]	; (800085c <MX_LPUART1_UART_Init+0x94>)
 80007d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007d4:	4a22      	ldr	r2, [pc, #136]	; (8000860 <MX_LPUART1_UART_Init+0x98>)
 80007d6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007ea:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007ec:	220c      	movs	r2, #12
 80007ee:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800080e:	4812      	ldr	r0, [pc, #72]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 8000810:	f004 f836 	bl	8004880 <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800081a:	f000 f991 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081e:	2100      	movs	r1, #0
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 8000822:	f004 fcf1 	bl	8005208 <HAL_UARTEx_SetTxFifoThreshold>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 800082c:	f000 f988 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000830:	2100      	movs	r1, #0
 8000832:	4809      	ldr	r0, [pc, #36]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 8000834:	f004 fd26 	bl	8005284 <HAL_UARTEx_SetRxFifoThreshold>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800083e:	f000 f97f 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 8000844:	f004 fca7 	bl	8005196 <HAL_UARTEx_DisableFifoMode>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800084e:	f000 f977 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000028 	.word	0x20000028
 800085c:	40008000 	.word	0x40008000
 8000860:	00033324 	.word	0x00033324

08000864 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	; 0x30
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800086a:	f107 0318 	add.w	r3, r7, #24
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
 800087a:	615a      	str	r2, [r3, #20]
  RTC_TimeTypeDef sTime = {0};
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800088e:	4b31      	ldr	r3, [pc, #196]	; (8000954 <MX_RTC_Init+0xf0>)
 8000890:	4a31      	ldr	r2, [pc, #196]	; (8000958 <MX_RTC_Init+0xf4>)
 8000892:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000894:	4b2f      	ldr	r3, [pc, #188]	; (8000954 <MX_RTC_Init+0xf0>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800089a:	4b2e      	ldr	r3, [pc, #184]	; (8000954 <MX_RTC_Init+0xf0>)
 800089c:	227f      	movs	r2, #127	; 0x7f
 800089e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008a0:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <MX_RTC_Init+0xf0>)
 80008a2:	22ff      	movs	r2, #255	; 0xff
 80008a4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008a6:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <MX_RTC_Init+0xf0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008ac:	4b29      	ldr	r3, [pc, #164]	; (8000954 <MX_RTC_Init+0xf0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008b2:	4b28      	ldr	r3, [pc, #160]	; (8000954 <MX_RTC_Init+0xf0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008b8:	4b26      	ldr	r3, [pc, #152]	; (8000954 <MX_RTC_Init+0xf0>)
 80008ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008be:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <MX_RTC_Init+0xf0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008c6:	4823      	ldr	r0, [pc, #140]	; (8000954 <MX_RTC_Init+0xf0>)
 80008c8:	f003 fd6c 	bl	80043a4 <HAL_RTC_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_RTC_Init+0x72>
  {
    Error_Handler();
 80008d2:	f000 f935 	bl	8000b40 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80008e6:	f107 0318 	add.w	r3, r7, #24
 80008ea:	4619      	mov	r1, r3
 80008ec:	4819      	ldr	r0, [pc, #100]	; (8000954 <MX_RTC_Init+0xf0>)
 80008ee:	f003 ff9b 	bl	8004828 <HAL_RTCEx_PrivilegeModeSet>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80008f8:	f000 f922 	bl	8000b40 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x14;
 80008fc:	2314      	movs	r3, #20
 80008fe:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x10;
 8000900:	2310      	movs	r3, #16
 8000902:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000904:	2300      	movs	r3, #0
 8000906:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2201      	movs	r2, #1
 8000914:	4619      	mov	r1, r3
 8000916:	480f      	ldr	r0, [pc, #60]	; (8000954 <MX_RTC_Init+0xf0>)
 8000918:	f003 fdb2 	bl	8004480 <HAL_RTC_SetTime>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000922:	f000 f90d 	bl	8000b40 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000926:	2304      	movs	r3, #4
 8000928:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800092a:	2301      	movs	r3, #1
 800092c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 800092e:	2306      	movs	r3, #6
 8000930:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000932:	2300      	movs	r3, #0
 8000934:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000936:	463b      	mov	r3, r7
 8000938:	2201      	movs	r2, #1
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_RTC_Init+0xf0>)
 800093e:	f003 fe35 	bl	80045ac <HAL_RTC_SetDate>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_RTC_Init+0xe8>
  {
    Error_Handler();
 8000948:	f000 f8fa 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	3730      	adds	r7, #48	; 0x30
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000120 	.word	0x20000120
 8000958:	40002800 	.word	0x40002800

0800095c <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	463b      	mov	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
 8000970:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000972:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000976:	f7ff fe03 	bl	8000580 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800097a:	2002      	movs	r0, #2
 800097c:	f7ff fde8 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff fde5 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800098a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800098c:	2303      	movs	r3, #3
 800098e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000994:	463b      	mov	r3, r7
 8000996:	4619      	mov	r1, r3
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <MX_UCPD1_Init+0x64>)
 800099a:	f004 fe4a 	bl	8005632 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800099e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009a4:	2303      	movs	r3, #3
 80009a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	463b      	mov	r3, r7
 80009ae:	4619      	mov	r1, r3
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_UCPD1_Init+0x68>)
 80009b2:	f004 fe3e 	bl	8005632 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	42020400 	.word	0x42020400
 80009c4:	42020000 	.word	0x42020000

080009c8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_USB_PCD_Init+0x48>)
 80009ce:	4a11      	ldr	r2, [pc, #68]	; (8000a14 <MX_USB_PCD_Init+0x4c>)
 80009d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_USB_PCD_Init+0x48>)
 80009d4:	2208      	movs	r2, #8
 80009d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <MX_USB_PCD_Init+0x48>)
 80009da:	2202      	movs	r2, #2
 80009dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_USB_PCD_Init+0x48>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_USB_PCD_Init+0x48>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_USB_PCD_Init+0x48>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_USB_PCD_Init+0x48>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_USB_PCD_Init+0x48>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_USB_PCD_Init+0x48>)
 80009fe:	f001 fe3b 	bl	8002678 <HAL_PCD_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a08:	f000 f89a 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000148 	.word	0x20000148
 8000a14:	4000d400 	.word	0x4000d400

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b3f      	ldr	r3, [pc, #252]	; (8000b2c <MX_GPIO_Init+0x114>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a3e      	ldr	r2, [pc, #248]	; (8000b2c <MX_GPIO_Init+0x114>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b3c      	ldr	r3, [pc, #240]	; (8000b2c <MX_GPIO_Init+0x114>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	4b39      	ldr	r3, [pc, #228]	; (8000b2c <MX_GPIO_Init+0x114>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a38      	ldr	r2, [pc, #224]	; (8000b2c <MX_GPIO_Init+0x114>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b36      	ldr	r3, [pc, #216]	; (8000b2c <MX_GPIO_Init+0x114>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5e:	4b33      	ldr	r3, [pc, #204]	; (8000b2c <MX_GPIO_Init+0x114>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a32      	ldr	r2, [pc, #200]	; (8000b2c <MX_GPIO_Init+0x114>)
 8000a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <MX_GPIO_Init+0x114>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000a76:	f001 ff89 	bl	800298c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <MX_GPIO_Init+0x114>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a2b      	ldr	r2, [pc, #172]	; (8000b2c <MX_GPIO_Init+0x114>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <MX_GPIO_Init+0x114>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	4826      	ldr	r0, [pc, #152]	; (8000b30 <MX_GPIO_Init+0x118>)
 8000a98:	f001 fd8c 	bl	80025b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa2:	4824      	ldr	r0, [pc, #144]	; (8000b34 <MX_GPIO_Init+0x11c>)
 8000aa4:	f001 fd86 	bl	80025b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	21a0      	movs	r1, #160	; 0xa0
 8000aac:	4822      	ldr	r0, [pc, #136]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000aae:	f001 fd81 	bl	80025b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000ab2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab8:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <MX_GPIO_Init+0x124>)
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	481c      	ldr	r0, [pc, #112]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000ac8:	f001 fbf4 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4813      	ldr	r0, [pc, #76]	; (8000b30 <MX_GPIO_Init+0x118>)
 8000ae4:	f001 fbe6 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_GPIO_Init+0x11c>)
 8000b02:	f001 fbd7 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000b06:	23a0      	movs	r3, #160	; 0xa0
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4806      	ldr	r0, [pc, #24]	; (8000b38 <MX_GPIO_Init+0x120>)
 8000b1e:	f001 fbc9 	bl	80022b4 <HAL_GPIO_Init>

}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	; 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	42020800 	.word	0x42020800
 8000b34:	42020000 	.word	0x42020000
 8000b38:	42020400 	.word	0x42020400
 8000b3c:	10110000 	.word	0x10110000

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0ae      	sub	sp, #184	; 0xb8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	2294      	movs	r2, #148	; 0x94
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f004 fe09 	bl	80057cc <memset>
  if(hadc->Instance==ADC1)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a1f      	ldr	r2, [pc, #124]	; (8000c3c <HAL_ADC_MspInit+0xa8>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d137      	bne.n	8000c34 <HAL_ADC_MspInit+0xa0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bc8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000bca:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000bce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 fece 	bl	8003978 <HAL_RCCEx_PeriphCLKConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000be2:	f7ff ffad 	bl	8000b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <HAL_ADC_MspInit+0xac>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <HAL_ADC_MspInit+0xac>)
 8000bec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <HAL_ADC_MspInit+0xac>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_ADC_MspInit+0xac>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <HAL_ADC_MspInit+0xac>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_ADC_MspInit+0xac>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000c16:	2304      	movs	r3, #4
 8000c18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <HAL_ADC_MspInit+0xb0>)
 8000c30:	f001 fb40 	bl	80022b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c34:	bf00      	nop
 8000c36:	37b8      	adds	r7, #184	; 0xb8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	42028000 	.word	0x42028000
 8000c40:	40021000 	.word	0x40021000
 8000c44:	42020800 	.word	0x42020800

08000c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0ae      	sub	sp, #184	; 0xb8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	2294      	movs	r2, #148	; 0x94
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f004 fdaf 	bl	80057cc <memset>
  if(huart->Instance==LPUART1)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <HAL_UART_MspInit+0xb4>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d13d      	bne.n	8000cf4 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c78:	2320      	movs	r3, #32
 8000c7a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	4618      	mov	r0, r3
 8000c86:	f002 fe77 	bl	8003978 <HAL_RCCEx_PeriphCLKConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c90:	f7ff ff56 	bl	8000b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_UART_MspInit+0xb8>)
 8000c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c98:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <HAL_UART_MspInit+0xb8>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_UART_MspInit+0xb8>)
 8000ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_UART_MspInit+0xb8>)
 8000cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb0:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <HAL_UART_MspInit+0xb8>)
 8000cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_UART_MspInit+0xb8>)
 8000cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000cc4:	f001 fe62 	bl	800298c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000cc8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cec:	4619      	mov	r1, r3
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_UART_MspInit+0xbc>)
 8000cf0:	f001 fae0 	bl	80022b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000cf4:	bf00      	nop
 8000cf6:	37b8      	adds	r7, #184	; 0xb8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40008000 	.word	0x40008000
 8000d00:	40021000 	.word	0x40021000
 8000d04:	42021800 	.word	0x42021800

08000d08 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0a8      	sub	sp, #160	; 0xa0
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2294      	movs	r2, #148	; 0x94
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f004 fd57 	bl	80057cc <memset>
  if(hrtc->Instance==RTC)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a16      	ldr	r2, [pc, #88]	; (8000d7c <HAL_RTC_MspInit+0x74>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d124      	bne.n	8000d72 <HAL_RTC_MspInit+0x6a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d2c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f002 fe1c 	bl	8003978 <HAL_RCCEx_PeriphCLKConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d46:	f7ff fefb 	bl	8000b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <HAL_RTC_MspInit+0x78>)
 8000d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d50:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <HAL_RTC_MspInit+0x78>)
 8000d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_RTC_MspInit+0x78>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_RTC_MspInit+0x78>)
 8000d60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d64:	6593      	str	r3, [r2, #88]	; 0x58
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_RTC_MspInit+0x78>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	37a0      	adds	r7, #160	; 0xa0
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40002800 	.word	0x40002800
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0ae      	sub	sp, #184	; 0xb8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	2294      	movs	r2, #148	; 0x94
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f004 fd11 	bl	80057cc <memset>
  if(hpcd->Instance==USB)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <HAL_PCD_MspInit+0xb4>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d13d      	bne.n	8000e30 <HAL_PCD_MspInit+0xac>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f002 fdd7 	bl	8003978 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000dd0:	f7ff feb6 	bl	8000b40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_PCD_MspInit+0xb8>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <HAL_PCD_MspInit+0xb8>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_PCD_MspInit+0xb8>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000df0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e06:	230a      	movs	r3, #10
 8000e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e10:	4619      	mov	r1, r3
 8000e12:	480b      	ldr	r0, [pc, #44]	; (8000e40 <HAL_PCD_MspInit+0xbc>)
 8000e14:	f001 fa4e 	bl	80022b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_PCD_MspInit+0xb8>)
 8000e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_PCD_MspInit+0xb8>)
 8000e1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e22:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_PCD_MspInit+0xb8>)
 8000e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e30:	bf00      	nop
 8000e32:	37b8      	adds	r7, #184	; 0xb8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	4000d400 	.word	0x4000d400
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	42020000 	.word	0x42020000

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <NMI_Handler+0x4>

08000e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler+0x4>

08000e56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 f942 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000ec2:	4b4f      	ldr	r3, [pc, #316]	; (8001000 <SystemCoreClockUpdate+0x144>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d107      	bne.n	8000ede <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000ece:	4b4c      	ldr	r3, [pc, #304]	; (8001000 <SystemCoreClockUpdate+0x144>)
 8000ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e005      	b.n	8000eea <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000ede:	4b48      	ldr	r3, [pc, #288]	; (8001000 <SystemCoreClockUpdate+0x144>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	091b      	lsrs	r3, r3, #4
 8000ee4:	f003 030f 	and.w	r3, r3, #15
 8000ee8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000eea:	4a46      	ldr	r2, [pc, #280]	; (8001004 <SystemCoreClockUpdate+0x148>)
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ef4:	4b42      	ldr	r3, [pc, #264]	; (8001000 <SystemCoreClockUpdate+0x144>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f003 030c 	and.w	r3, r3, #12
 8000efc:	2b0c      	cmp	r3, #12
 8000efe:	d866      	bhi.n	8000fce <SystemCoreClockUpdate+0x112>
 8000f00:	a201      	add	r2, pc, #4	; (adr r2, 8000f08 <SystemCoreClockUpdate+0x4c>)
 8000f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f06:	bf00      	nop
 8000f08:	08000f3d 	.word	0x08000f3d
 8000f0c:	08000fcf 	.word	0x08000fcf
 8000f10:	08000fcf 	.word	0x08000fcf
 8000f14:	08000fcf 	.word	0x08000fcf
 8000f18:	08000f45 	.word	0x08000f45
 8000f1c:	08000fcf 	.word	0x08000fcf
 8000f20:	08000fcf 	.word	0x08000fcf
 8000f24:	08000fcf 	.word	0x08000fcf
 8000f28:	08000f4d 	.word	0x08000f4d
 8000f2c:	08000fcf 	.word	0x08000fcf
 8000f30:	08000fcf 	.word	0x08000fcf
 8000f34:	08000fcf 	.word	0x08000fcf
 8000f38:	08000f55 	.word	0x08000f55
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000f3c:	4a32      	ldr	r2, [pc, #200]	; (8001008 <SystemCoreClockUpdate+0x14c>)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	6013      	str	r3, [r2, #0]
      break;
 8000f42:	e048      	b.n	8000fd6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000f44:	4b30      	ldr	r3, [pc, #192]	; (8001008 <SystemCoreClockUpdate+0x14c>)
 8000f46:	4a31      	ldr	r2, [pc, #196]	; (800100c <SystemCoreClockUpdate+0x150>)
 8000f48:	601a      	str	r2, [r3, #0]
      break;
 8000f4a:	e044      	b.n	8000fd6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000f4c:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <SystemCoreClockUpdate+0x14c>)
 8000f4e:	4a30      	ldr	r2, [pc, #192]	; (8001010 <SystemCoreClockUpdate+0x154>)
 8000f50:	601a      	str	r2, [r3, #0]
      break;
 8000f52:	e040      	b.n	8000fd6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000f54:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <SystemCoreClockUpdate+0x144>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000f5e:	4b28      	ldr	r3, [pc, #160]	; (8001000 <SystemCoreClockUpdate+0x144>)
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	091b      	lsrs	r3, r3, #4
 8000f64:	f003 030f 	and.w	r3, r3, #15
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d003      	beq.n	8000f7a <SystemCoreClockUpdate+0xbe>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d006      	beq.n	8000f86 <SystemCoreClockUpdate+0xca>
 8000f78:	e00b      	b.n	8000f92 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000f7a:	4a24      	ldr	r2, [pc, #144]	; (800100c <SystemCoreClockUpdate+0x150>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f82:	613b      	str	r3, [r7, #16]
          break;
 8000f84:	e00b      	b.n	8000f9e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000f86:	4a22      	ldr	r2, [pc, #136]	; (8001010 <SystemCoreClockUpdate+0x154>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	613b      	str	r3, [r7, #16]
          break;
 8000f90:	e005      	b.n	8000f9e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	613b      	str	r3, [r7, #16]
          break;
 8000f9c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <SystemCoreClockUpdate+0x144>)
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	0a1b      	lsrs	r3, r3, #8
 8000fa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	fb02 f303 	mul.w	r3, r2, r3
 8000fae:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <SystemCoreClockUpdate+0x144>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0e5b      	lsrs	r3, r3, #25
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	3301      	adds	r3, #1
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4a0f      	ldr	r2, [pc, #60]	; (8001008 <SystemCoreClockUpdate+0x14c>)
 8000fca:	6013      	str	r3, [r2, #0]
      break;
 8000fcc:	e003      	b.n	8000fd6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <SystemCoreClockUpdate+0x14c>)
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	6013      	str	r3, [r2, #0]
      break;
 8000fd4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <SystemCoreClockUpdate+0x144>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	091b      	lsrs	r3, r3, #4
 8000fdc:	f003 030f 	and.w	r3, r3, #15
 8000fe0:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <SystemCoreClockUpdate+0x158>)
 8000fe2:	5cd3      	ldrb	r3, [r2, r3]
 8000fe4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <SystemCoreClockUpdate+0x14c>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff0:	4a05      	ldr	r2, [pc, #20]	; (8001008 <SystemCoreClockUpdate+0x14c>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	371c      	adds	r7, #28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	40021000 	.word	0x40021000
 8001004:	0800580c 	.word	0x0800580c
 8001008:	20000000 	.word	0x20000000
 800100c:	00f42400 	.word	0x00f42400
 8001010:	007a1200 	.word	0x007a1200
 8001014:	080057f4 	.word	0x080057f4

08001018 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001050 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800101c:	f7ff ff3c 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001020:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001022:	e003      	b.n	800102c <LoopCopyDataInit>

08001024 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001026:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001028:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800102a:	3104      	adds	r1, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800102c:	480a      	ldr	r0, [pc, #40]	; (8001058 <LoopForever+0xa>)
	ldr	r3, =_edata
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001030:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001032:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001034:	d3f6      	bcc.n	8001024 <CopyDataInit>
	ldr	r2, =_sbss
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001038:	e002      	b.n	8001040 <LoopFillZerobss>

0800103a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800103a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800103c:	f842 3b04 	str.w	r3, [r2], #4

08001040 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <LoopForever+0x16>)
	cmp	r2, r3
 8001042:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001044:	d3f9      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001046:	f004 fb9d 	bl	8005784 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800104a:	f7ff fab1 	bl	80005b0 <main>

0800104e <LoopForever>:

LoopForever:
    b LoopForever
 800104e:	e7fe      	b.n	800104e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001050:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001054:	08005884 	.word	0x08005884
	ldr	r0, =_sdata
 8001058:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800105c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001060:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001064:	20000440 	.word	0x20000440

08001068 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC1_2_IRQHandler>

0800106a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001074:	2004      	movs	r0, #4
 8001076:	f001 f8eb 	bl	8002250 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800107a:	f7ff ff1f 	bl	8000ebc <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f80e 	bl	80010a0 <HAL_InitTick>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d002      	beq.n	8001090 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	e001      	b.n	8001094 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001090:	f7ff fd5c 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001094:	79fb      	ldrb	r3, [r7, #7]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_InitTick+0x6c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d023      	beq.n	80010fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <HAL_InitTick+0x70>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_InitTick+0x6c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 f8e5 	bl	800229a <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10f      	bne.n	80010f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b07      	cmp	r3, #7
 80010da:	d809      	bhi.n	80010f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f001 f8bf 	bl	8002266 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e8:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_InitTick+0x74>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e007      	b.n	8001100 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
 80010f4:	e004      	b.n	8001100 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	e001      	b.n	8001100 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008
 8001110:	20000000 	.word	0x20000000
 8001114:	20000004 	.word	0x20000004

08001118 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008
 800113c:	2000043c 	.word	0x2000043c

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	2000043c 	.word	0x2000043c

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff ffee 	bl	8001140 <HAL_GetTick>
 8001164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001170:	d005      	beq.n	800117e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_Delay+0x44>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800117e:	bf00      	nop
 8001180:	f7ff ffde 	bl	8001140 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	429a      	cmp	r2, r3
 800118e:	d8f7      	bhi.n	8001180 <HAL_Delay+0x28>
  {
  }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000008 	.word	0x20000008

080011a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	431a      	orrs	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	609a      	str	r2, [r3, #8]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	609a      	str	r2, [r3, #8]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3360      	adds	r3, #96	; 0x60
 800121a:	461a      	mov	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <LL_ADC_SetOffset+0x44>)
 800122a:	4013      	ands	r3, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	4313      	orrs	r3, r2
 8001238:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001240:	bf00      	nop
 8001242:	371c      	adds	r7, #28
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	03fff000 	.word	0x03fff000

08001250 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3360      	adds	r3, #96	; 0x60
 800125e:	461a      	mov	r2, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3360      	adds	r3, #96	; 0x60
 800128c:	461a      	mov	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	431a      	orrs	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012a6:	bf00      	nop
 80012a8:	371c      	adds	r7, #28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	615a      	str	r2, [r3, #20]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012d8:	b480      	push	{r7}
 80012da:	b087      	sub	sp, #28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3330      	adds	r3, #48	; 0x30
 80012e8:	461a      	mov	r2, r3
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	4413      	add	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	211f      	movs	r1, #31
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	401a      	ands	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	0e9b      	lsrs	r3, r3, #26
 8001310:	f003 011f 	and.w	r1, r3, #31
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f003 031f 	and.w	r3, r3, #31
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	431a      	orrs	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001324:	bf00      	nop
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3314      	adds	r3, #20
 8001340:	461a      	mov	r2, r3
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	0e5b      	lsrs	r3, r3, #25
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	4413      	add	r3, r2
 800134e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	0d1b      	lsrs	r3, r3, #20
 8001358:	f003 031f 	and.w	r3, r3, #31
 800135c:	2107      	movs	r1, #7
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	401a      	ands	r2, r3
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	0d1b      	lsrs	r3, r3, #20
 800136a:	f003 031f 	and.w	r3, r3, #31
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	431a      	orrs	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800137a:	bf00      	nop
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013a0:	43db      	mvns	r3, r3
 80013a2:	401a      	ands	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0318 	and.w	r3, r3, #24
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80013ac:	40d9      	lsrs	r1, r3
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	400b      	ands	r3, r1
 80013b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013b6:	431a      	orrs	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	0007ffff 	.word	0x0007ffff

080013d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6093      	str	r3, [r2, #8]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001408:	d101      	bne.n	800140e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800142c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001430:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001454:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001458:	d101      	bne.n	800145e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <LL_ADC_IsEnabled+0x18>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <LL_ADC_IsEnabled+0x1a>
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d101      	bne.n	80014aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d101      	bne.n	80014d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e134      	b.n	8001764 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	2b00      	cmp	r3, #0
 8001506:	d109      	bne.n	800151c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fb43 	bl	8000b94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff67 	bl	80013f4 <LL_ADC_IsDeepPowerDownEnabled>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff4d 	bl	80013d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff82 	bl	8001444 <LL_ADC_IsInternalRegulatorEnabled>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d115      	bne.n	8001572 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff66 	bl	800141c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001550:	4b86      	ldr	r3, [pc, #536]	; (800176c <HAL_ADC_Init+0x28c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	099b      	lsrs	r3, r3, #6
 8001556:	4a86      	ldr	r2, [pc, #536]	; (8001770 <HAL_ADC_Init+0x290>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	099b      	lsrs	r3, r3, #6
 800155e:	3301      	adds	r3, #1
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001564:	e002      	b.n	800156c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3b01      	subs	r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f9      	bne.n	8001566 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff64 	bl	8001444 <LL_ADC_IsInternalRegulatorEnabled>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10d      	bne.n	800159e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	f043 0210 	orr.w	r2, r3, #16
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001592:	f043 0201 	orr.w	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff75 	bl	8001492 <LL_ADC_REG_IsConversionOngoing>
 80015a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 80cd 	bne.w	8001752 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f040 80c9 	bne.w	8001752 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015c8:	f043 0202 	orr.w	r2, r3, #2
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff49 	bl	800146c <LL_ADC_IsEnabled>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d110      	bne.n	8001602 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015e0:	4864      	ldr	r0, [pc, #400]	; (8001774 <HAL_ADC_Init+0x294>)
 80015e2:	f7ff ff43 	bl	800146c <LL_ADC_IsEnabled>
 80015e6:	4604      	mov	r4, r0
 80015e8:	4863      	ldr	r0, [pc, #396]	; (8001778 <HAL_ADC_Init+0x298>)
 80015ea:	f7ff ff3f 	bl	800146c <LL_ADC_IsEnabled>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4323      	orrs	r3, r4
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d105      	bne.n	8001602 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4619      	mov	r1, r3
 80015fc:	485f      	ldr	r0, [pc, #380]	; (800177c <HAL_ADC_Init+0x29c>)
 80015fe:	f7ff fdcf 	bl	80011a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	7e5b      	ldrb	r3, [r3, #25]
 8001606:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800160c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001612:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001618:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001620:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d106      	bne.n	800163e <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	3b01      	subs	r3, #1
 8001636:	045b      	lsls	r3, r3, #17
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	2b00      	cmp	r3, #0
 8001644:	d009      	beq.n	800165a <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	4b47      	ldr	r3, [pc, #284]	; (8001780 <HAL_ADC_Init+0x2a0>)
 8001662:	4013      	ands	r3, r2
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	69b9      	ldr	r1, [r7, #24]
 800166a:	430b      	orrs	r3, r1
 800166c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff0d 	bl	8001492 <LL_ADC_REG_IsConversionOngoing>
 8001678:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff1a 	bl	80014b8 <LL_ADC_INJ_IsConversionOngoing>
 8001684:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d140      	bne.n	800170e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d13d      	bne.n	800170e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	7e1b      	ldrb	r3, [r3, #24]
 800169a:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800169c:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016a4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016b4:	f023 0306 	bic.w	r3, r3, #6
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	69b9      	ldr	r1, [r7, #24]
 80016be:	430b      	orrs	r3, r1
 80016c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d118      	bne.n	80016fe <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016d6:	f023 0304 	bic.w	r3, r3, #4
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016e2:	4311      	orrs	r1, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016e8:	4311      	orrs	r1, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016ee:	430a      	orrs	r2, r1
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	e007      	b.n	800170e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d10c      	bne.n	8001730 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	f023 010f 	bic.w	r1, r3, #15
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	1e5a      	subs	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	631a      	str	r2, [r3, #48]	; 0x30
 800172e:	e007      	b.n	8001740 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 020f 	bic.w	r2, r2, #15
 800173e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	f023 0303 	bic.w	r3, r3, #3
 8001748:	f043 0201 	orr.w	r2, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	659a      	str	r2, [r3, #88]	; 0x58
 8001750:	e007      	b.n	8001762 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001756:	f043 0210 	orr.w	r2, r3, #16
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001762:	7ffb      	ldrb	r3, [r7, #31]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3724      	adds	r7, #36	; 0x24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd90      	pop	{r4, r7, pc}
 800176c:	20000000 	.word	0x20000000
 8001770:	053e2d63 	.word	0x053e2d63
 8001774:	42028000 	.word	0x42028000
 8001778:	42028100 	.word	0x42028100
 800177c:	42028300 	.word	0x42028300
 8001780:	fff0c007 	.word	0xfff0c007

08001784 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b0b7      	sub	sp, #220	; 0xdc
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x22>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e3c1      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x7a6>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fe6d 	bl	8001492 <LL_ADC_REG_IsConversionOngoing>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f040 83a6 	bne.w	8001f0c <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	6859      	ldr	r1, [r3, #4]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	f7ff fd83 	bl	80012d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fe5b 	bl	8001492 <LL_ADC_REG_IsConversionOngoing>
 80017dc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fe67 	bl	80014b8 <LL_ADC_INJ_IsConversionOngoing>
 80017ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 81c1 	bne.w	8001b7a <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f040 81bc 	bne.w	8001b7a <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800180a:	d10f      	bne.n	800182c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2200      	movs	r2, #0
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff fd8a 	bl	8001330 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fd44 	bl	80012b2 <LL_ADC_SetSamplingTimeCommonConfig>
 800182a:	e00e      	b.n	800184a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	6819      	ldr	r1, [r3, #0]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	461a      	mov	r2, r3
 800183a:	f7ff fd79 	bl	8001330 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fd34 	bl	80012b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	695a      	ldr	r2, [r3, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	08db      	lsrs	r3, r3, #3
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	2b04      	cmp	r3, #4
 800186a:	d00a      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	6919      	ldr	r1, [r3, #16]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800187c:	f7ff fcc4 	bl	8001208 <LL_ADC_SetOffset>
 8001880:	e17b      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fce1 	bl	8001250 <LL_ADC_GetOffsetChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10a      	bne.n	80018ae <HAL_ADC_ConfigChannel+0x12a>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fcd6 	bl	8001250 <LL_ADC_GetOffsetChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	0e9b      	lsrs	r3, r3, #26
 80018a8:	f003 021f 	and.w	r2, r3, #31
 80018ac:	e01e      	b.n	80018ec <HAL_ADC_ConfigChannel+0x168>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2100      	movs	r1, #0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fccb 	bl	8001250 <LL_ADC_GetOffsetChannel>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018c4:	fa93 f3a3 	rbit	r3, r3
 80018c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80018dc:	2320      	movs	r3, #32
 80018de:	e004      	b.n	80018ea <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80018e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d105      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x180>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0e9b      	lsrs	r3, r3, #26
 80018fe:	f003 031f 	and.w	r3, r3, #31
 8001902:	e018      	b.n	8001936 <HAL_ADC_ConfigChannel+0x1b2>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800191c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001920:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001928:	2320      	movs	r3, #32
 800192a:	e004      	b.n	8001936 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 800192c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001930:	fab3 f383 	clz	r3, r3
 8001934:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001936:	429a      	cmp	r2, r3
 8001938:	d106      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fc9a 	bl	800127c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2101      	movs	r1, #1
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fc7e 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10a      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x1f0>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2101      	movs	r1, #1
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fc73 	bl	8001250 <LL_ADC_GetOffsetChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	0e9b      	lsrs	r3, r3, #26
 800196e:	f003 021f 	and.w	r2, r3, #31
 8001972:	e01e      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x22e>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2101      	movs	r1, #1
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fc68 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8001980:	4603      	mov	r3, r0
 8001982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001996:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800199a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80019a2:	2320      	movs	r3, #32
 80019a4:	e004      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80019a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019aa:	fab3 f383 	clz	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d105      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x246>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	0e9b      	lsrs	r3, r3, #26
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	e018      	b.n	80019fc <HAL_ADC_ConfigChannel+0x278>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019d6:	fa93 f3a3 	rbit	r3, r3
 80019da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80019de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80019e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 80019ee:	2320      	movs	r3, #32
 80019f0:	e004      	b.n	80019fc <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 80019f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019f6:	fab3 f383 	clz	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d106      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2200      	movs	r2, #0
 8001a06:	2101      	movs	r1, #1
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fc37 	bl	800127c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2102      	movs	r1, #2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fc1b 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10a      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x2b6>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2102      	movs	r1, #2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fc10 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	0e9b      	lsrs	r3, r3, #26
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	e01e      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x2f4>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2102      	movs	r1, #2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fc05 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a50:	fa93 f3a3 	rbit	r3, r3
 8001a54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001a68:	2320      	movs	r3, #32
 8001a6a:	e004      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001a6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a70:	fab3 f383 	clz	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d105      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x30c>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0e9b      	lsrs	r3, r3, #26
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	e016      	b.n	8001abe <HAL_ADC_ConfigChannel+0x33a>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001aa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	e004      	b.n	8001abe <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d106      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2102      	movs	r1, #2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fbd6 	bl	800127c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2103      	movs	r1, #3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fbba 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x378>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2103      	movs	r1, #3
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fbaf 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	0e9b      	lsrs	r3, r3, #26
 8001af6:	f003 021f 	and.w	r2, r3, #31
 8001afa:	e017      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x3a8>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2103      	movs	r1, #3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fba4 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b16:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001b1e:	2320      	movs	r3, #32
 8001b20:	e003      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d105      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x3c0>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0e9b      	lsrs	r3, r3, #26
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	e011      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x3e4>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b54:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001b5c:	2320      	movs	r3, #32
 8001b5e:	e003      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d106      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2200      	movs	r2, #0
 8001b72:	2103      	movs	r1, #3
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fb81 	bl	800127c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fc74 	bl	800146c <LL_ADC_IsEnabled>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 81c9 	bne.w	8001f1e <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	6819      	ldr	r1, [r3, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f7ff fbf5 	bl	8001388 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	4a8f      	ldr	r2, [pc, #572]	; (8001de0 <HAL_ADC_ConfigChannel+0x65c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	f040 8131 	bne.w	8001e0c <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x44e>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	0e9b      	lsrs	r3, r3, #26
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	2b09      	cmp	r3, #9
 8001bc8:	bf94      	ite	ls
 8001bca:	2301      	movls	r3, #1
 8001bcc:	2300      	movhi	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	e019      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x482>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001be0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001be2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001be4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001bea:	2320      	movs	r3, #32
 8001bec:	e003      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	2b09      	cmp	r3, #9
 8001bfe:	bf94      	ite	ls
 8001c00:	2301      	movls	r3, #1
 8001c02:	2300      	movhi	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d079      	beq.n	8001cfe <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d107      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x4a2>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	0e9b      	lsrs	r3, r3, #26
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	069b      	lsls	r3, r3, #26
 8001c20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c24:	e015      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x4ce>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c36:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	e003      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	069b      	lsls	r3, r3, #26
 8001c4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x4ee>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0e9b      	lsrs	r3, r3, #26
 8001c64:	3301      	adds	r3, #1
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c70:	e017      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x51e>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c82:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	e003      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8001c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	3301      	adds	r3, #1
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	ea42 0103 	orr.w	r1, r2, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10a      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x544>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	0e9b      	lsrs	r3, r3, #26
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f003 021f 	and.w	r2, r3, #31
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	051b      	lsls	r3, r3, #20
 8001cc6:	e018      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x576>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	e003      	b.n	8001cec <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	3301      	adds	r3, #1
 8001cee:	f003 021f 	and.w	r2, r3, #31
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	e081      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d107      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x596>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	0e9b      	lsrs	r3, r3, #26
 8001d10:	3301      	adds	r3, #1
 8001d12:	069b      	lsls	r3, r3, #26
 8001d14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d18:	e015      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x5c2>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8001d32:	2320      	movs	r3, #32
 8001d34:	e003      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8001d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	069b      	lsls	r3, r3, #26
 8001d42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d109      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x5e2>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	0e9b      	lsrs	r3, r3, #26
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	2101      	movs	r1, #1
 8001d60:	fa01 f303 	lsl.w	r3, r1, r3
 8001d64:	e017      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x612>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	61fb      	str	r3, [r7, #28]
  return result;
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8001d7e:	2320      	movs	r3, #32
 8001d80:	e003      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	2101      	movs	r1, #1
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	ea42 0103 	orr.w	r1, r2, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10d      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x63e>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	0e9b      	lsrs	r3, r3, #26
 8001dac:	3301      	adds	r3, #1
 8001dae:	f003 021f 	and.w	r2, r3, #31
 8001db2:	4613      	mov	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	3b1e      	subs	r3, #30
 8001dba:	051b      	lsls	r3, r3, #20
 8001dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	e01e      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x67c>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	613b      	str	r3, [r7, #16]
  return result;
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d104      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8001dda:	2320      	movs	r3, #32
 8001ddc:	e006      	b.n	8001dec <HAL_ADC_ConfigChannel+0x668>
 8001dde:	bf00      	nop
 8001de0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	3301      	adds	r3, #1
 8001dee:	f003 021f 	and.w	r2, r3, #31
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	3b1e      	subs	r3, #30
 8001dfa:	051b      	lsls	r3, r3, #20
 8001dfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e00:	430b      	orrs	r3, r1
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	6892      	ldr	r2, [r2, #8]
 8001e06:	4619      	mov	r1, r3
 8001e08:	f7ff fa92 	bl	8001330 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b48      	ldr	r3, [pc, #288]	; (8001f34 <HAL_ADC_ConfigChannel+0x7b0>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 8082 	beq.w	8001f1e <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e1a:	4847      	ldr	r0, [pc, #284]	; (8001f38 <HAL_ADC_ConfigChannel+0x7b4>)
 8001e1c:	f7ff f9e6 	bl	80011ec <LL_ADC_GetCommonPathInternalCh>
 8001e20:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e24:	4845      	ldr	r0, [pc, #276]	; (8001f3c <HAL_ADC_ConfigChannel+0x7b8>)
 8001e26:	f7ff fb21 	bl	800146c <LL_ADC_IsEnabled>
 8001e2a:	4604      	mov	r4, r0
 8001e2c:	4844      	ldr	r0, [pc, #272]	; (8001f40 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e2e:	f7ff fb1d 	bl	800146c <LL_ADC_IsEnabled>
 8001e32:	4603      	mov	r3, r0
 8001e34:	4323      	orrs	r3, r4
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d15e      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a41      	ldr	r2, [pc, #260]	; (8001f44 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d127      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d121      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a39      	ldr	r2, [pc, #228]	; (8001f3c <HAL_ADC_ConfigChannel+0x7b8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d161      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001e5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e62:	4619      	mov	r1, r3
 8001e64:	4834      	ldr	r0, [pc, #208]	; (8001f38 <HAL_ADC_ConfigChannel+0x7b4>)
 8001e66:	f7ff f9ae 	bl	80011c6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e6a:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	099b      	lsrs	r3, r3, #6
 8001e70:	4a36      	ldr	r2, [pc, #216]	; (8001f4c <HAL_ADC_ConfigChannel+0x7c8>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	099b      	lsrs	r3, r3, #6
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001e84:	e002      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f9      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e92:	e044      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a2d      	ldr	r2, [pc, #180]	; (8001f50 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d113      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x742>
 8001e9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a23      	ldr	r2, [pc, #140]	; (8001f3c <HAL_ADC_ConfigChannel+0x7b8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d134      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001eb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	481e      	ldr	r0, [pc, #120]	; (8001f38 <HAL_ADC_ConfigChannel+0x7b4>)
 8001ec0:	f7ff f981 	bl	80011c6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ec4:	e02b      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x79a>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a22      	ldr	r2, [pc, #136]	; (8001f54 <HAL_ADC_ConfigChannel+0x7d0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d126      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x79a>
 8001ed0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d120      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a16      	ldr	r2, [pc, #88]	; (8001f3c <HAL_ADC_ConfigChannel+0x7b8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d11b      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001ee6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4811      	ldr	r0, [pc, #68]	; (8001f38 <HAL_ADC_ConfigChannel+0x7b4>)
 8001ef2:	f7ff f968 	bl	80011c6 <LL_ADC_SetCommonPathInternalCh>
 8001ef6:	e012      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f043 0220 	orr.w	r2, r3, #32
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001f0a:	e008      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	f043 0220 	orr.w	r2, r3, #32
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f26:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	37dc      	adds	r7, #220	; 0xdc
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd90      	pop	{r4, r7, pc}
 8001f32:	bf00      	nop
 8001f34:	80080000 	.word	0x80080000
 8001f38:	42028300 	.word	0x42028300
 8001f3c:	42028000 	.word	0x42028000
 8001f40:	42028100 	.word	0x42028100
 8001f44:	c7520000 	.word	0xc7520000
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	053e2d63 	.word	0x053e2d63
 8001f50:	cb840000 	.word	0xcb840000
 8001f54:	80000001 	.word	0x80000001

08001f58 <LL_ADC_IsEnabled>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <LL_ADC_IsEnabled+0x18>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <LL_ADC_IsEnabled+0x1a>
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <LL_ADC_REG_IsConversionOngoing>:
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d101      	bne.n	8001f96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b0a1      	sub	sp, #132	; 0x84
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e089      	b.n	80020d6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001fca:	2300      	movs	r3, #0
 8001fcc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001fce:	2300      	movs	r3, #0
 8001fd0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a42      	ldr	r2, [pc, #264]	; (80020e0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d102      	bne.n	8001fe2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001fdc:	4b41      	ldr	r3, [pc, #260]	; (80020e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	e001      	b.n	8001fe6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10b      	bne.n	8002004 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e068      	b.n	80020d6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff ffb9 	bl	8001f7e <LL_ADC_REG_IsConversionOngoing>
 800200c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ffb3 	bl	8001f7e <LL_ADC_REG_IsConversionOngoing>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d14a      	bne.n	80020b4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800201e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002020:	2b00      	cmp	r3, #0
 8002022:	d147      	bne.n	80020b4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002024:	4b30      	ldr	r3, [pc, #192]	; (80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002026:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d027      	beq.n	8002080 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	6859      	ldr	r1, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002042:	035b      	lsls	r3, r3, #13
 8002044:	430b      	orrs	r3, r1
 8002046:	431a      	orrs	r2, r3
 8002048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800204a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800204c:	4824      	ldr	r0, [pc, #144]	; (80020e0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800204e:	f7ff ff83 	bl	8001f58 <LL_ADC_IsEnabled>
 8002052:	4604      	mov	r4, r0
 8002054:	4823      	ldr	r0, [pc, #140]	; (80020e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002056:	f7ff ff7f 	bl	8001f58 <LL_ADC_IsEnabled>
 800205a:	4603      	mov	r3, r0
 800205c:	4323      	orrs	r3, r4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d132      	bne.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800206a:	f023 030f 	bic.w	r3, r3, #15
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	6811      	ldr	r1, [r2, #0]
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	6892      	ldr	r2, [r2, #8]
 8002076:	430a      	orrs	r2, r1
 8002078:	431a      	orrs	r2, r3
 800207a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800207c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800207e:	e023      	b.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800208a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800208c:	4814      	ldr	r0, [pc, #80]	; (80020e0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800208e:	f7ff ff63 	bl	8001f58 <LL_ADC_IsEnabled>
 8002092:	4604      	mov	r4, r0
 8002094:	4813      	ldr	r0, [pc, #76]	; (80020e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002096:	f7ff ff5f 	bl	8001f58 <LL_ADC_IsEnabled>
 800209a:	4603      	mov	r3, r0
 800209c:	4323      	orrs	r3, r4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d112      	bne.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80020a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020aa:	f023 030f 	bic.w	r3, r3, #15
 80020ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020b2:	e009      	b.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	f043 0220 	orr.w	r2, r3, #32
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80020c6:	e000      	b.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80020d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3784      	adds	r7, #132	; 0x84
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd90      	pop	{r4, r7, pc}
 80020de:	bf00      	nop
 80020e0:	42028000 	.word	0x42028000
 80020e4:	42028100 	.word	0x42028100
 80020e8:	42028300 	.word	0x42028300

080020ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002108:	4013      	ands	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800211c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211e:	4a04      	ldr	r2, [pc, #16]	; (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	60d3      	str	r3, [r2, #12]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <__NVIC_GetPriorityGrouping+0x18>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	f003 0307 	and.w	r3, r3, #7
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	; (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0152      	lsls	r2, r2, #5
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	; (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0152      	lsls	r2, r2, #5
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b03      	cmp	r3, #3
 80021c0:	bf28      	it	cs
 80021c2:	2303      	movcs	r3, #3
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3303      	adds	r3, #3
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b04      	subs	r3, #4
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800221c:	d301      	bcc.n	8002222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221e:	2301      	movs	r3, #1
 8002220:	e00f      	b.n	8002242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <SysTick_Config+0x40>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222a:	2107      	movs	r1, #7
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	f7ff ff8e 	bl	8002150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <SysTick_Config+0x40>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <SysTick_Config+0x40>)
 800223c:	2207      	movs	r2, #7
 800223e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	e000e010 	.word	0xe000e010

08002250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff47 	bl	80020ec <__NVIC_SetPriorityGrouping>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002274:	f7ff ff5e 	bl	8002134 <__NVIC_GetPriorityGrouping>
 8002278:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	6978      	ldr	r0, [r7, #20]
 8002280:	f7ff ff90 	bl	80021a4 <NVIC_EncodePriority>
 8002284:	4602      	mov	r2, r0
 8002286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff5f 	bl	8002150 <__NVIC_SetPriority>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ffb2 	bl	800220c <SysTick_Config>
 80022a8:	4603      	mov	r3, r0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022c2:	e158      	b.n	8002576 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2101      	movs	r1, #1
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	4013      	ands	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 814a 	beq.w	8002570 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d00b      	beq.n	80022fc <HAL_GPIO_Init+0x48>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d007      	beq.n	80022fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f0:	2b11      	cmp	r3, #17
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b12      	cmp	r3, #18
 80022fa:	d130      	bne.n	800235e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002332:	2201      	movs	r2, #1
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	f003 0201 	and.w	r2, r3, #1
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	2203      	movs	r2, #3
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0xea>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b12      	cmp	r3, #18
 800239c:	d123      	bne.n	80023e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	08da      	lsrs	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3208      	adds	r2, #8
 80023a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	220f      	movs	r2, #15
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	08da      	lsrs	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3208      	adds	r2, #8
 80023e0:	6939      	ldr	r1, [r7, #16]
 80023e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0203 	and.w	r2, r3, #3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80a4 	beq.w	8002570 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002428:	4a5a      	ldr	r2, [pc, #360]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	3318      	adds	r3, #24
 8002430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	220f      	movs	r2, #15
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a52      	ldr	r2, [pc, #328]	; (8002598 <HAL_GPIO_Init+0x2e4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d025      	beq.n	80024a0 <HAL_GPIO_Init+0x1ec>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a51      	ldr	r2, [pc, #324]	; (800259c <HAL_GPIO_Init+0x2e8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d01f      	beq.n	800249c <HAL_GPIO_Init+0x1e8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a50      	ldr	r2, [pc, #320]	; (80025a0 <HAL_GPIO_Init+0x2ec>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d019      	beq.n	8002498 <HAL_GPIO_Init+0x1e4>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a4f      	ldr	r2, [pc, #316]	; (80025a4 <HAL_GPIO_Init+0x2f0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d013      	beq.n	8002494 <HAL_GPIO_Init+0x1e0>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a4e      	ldr	r2, [pc, #312]	; (80025a8 <HAL_GPIO_Init+0x2f4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00d      	beq.n	8002490 <HAL_GPIO_Init+0x1dc>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a4d      	ldr	r2, [pc, #308]	; (80025ac <HAL_GPIO_Init+0x2f8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d007      	beq.n	800248c <HAL_GPIO_Init+0x1d8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a4c      	ldr	r2, [pc, #304]	; (80025b0 <HAL_GPIO_Init+0x2fc>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d101      	bne.n	8002488 <HAL_GPIO_Init+0x1d4>
 8002484:	2306      	movs	r3, #6
 8002486:	e00c      	b.n	80024a2 <HAL_GPIO_Init+0x1ee>
 8002488:	2307      	movs	r3, #7
 800248a:	e00a      	b.n	80024a2 <HAL_GPIO_Init+0x1ee>
 800248c:	2305      	movs	r3, #5
 800248e:	e008      	b.n	80024a2 <HAL_GPIO_Init+0x1ee>
 8002490:	2304      	movs	r3, #4
 8002492:	e006      	b.n	80024a2 <HAL_GPIO_Init+0x1ee>
 8002494:	2303      	movs	r3, #3
 8002496:	e004      	b.n	80024a2 <HAL_GPIO_Init+0x1ee>
 8002498:	2302      	movs	r3, #2
 800249a:	e002      	b.n	80024a2 <HAL_GPIO_Init+0x1ee>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <HAL_GPIO_Init+0x1ee>
 80024a0:	2300      	movs	r3, #0
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	f002 0203 	and.w	r2, r2, #3
 80024a8:	00d2      	lsls	r2, r2, #3
 80024aa:	4093      	lsls	r3, r2
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80024b2:	4938      	ldr	r1, [pc, #224]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	3318      	adds	r3, #24
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024c0:	4b34      	ldr	r3, [pc, #208]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 80024c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024e6:	4a2b      	ldr	r2, [pc, #172]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80024ee:	4b29      	ldr	r3, [pc, #164]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 80024f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002514:	4a1f      	ldr	r2, [pc, #124]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800251c:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	43db      	mvns	r3, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002540:	4a14      	ldr	r2, [pc, #80]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002546:	4b13      	ldr	r3, [pc, #76]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800256a:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	3301      	adds	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	f47f ae9f 	bne.w	80022c4 <HAL_GPIO_Init+0x10>
  }
}
 8002586:	bf00      	nop
 8002588:	bf00      	nop
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	4002f400 	.word	0x4002f400
 8002598:	42020000 	.word	0x42020000
 800259c:	42020400 	.word	0x42020400
 80025a0:	42020800 	.word	0x42020800
 80025a4:	42020c00 	.word	0x42020c00
 80025a8:	42021000 	.word	0x42021000
 80025ac:	42021400 	.word	0x42021400
 80025b0:	42021800 	.word	0x42021800

080025b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	807b      	strh	r3, [r7, #2]
 80025c0:	4613      	mov	r3, r2
 80025c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025c4:	787b      	ldrb	r3, [r7, #1]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ca:	887a      	ldrh	r2, [r7, #2]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025d0:	e002      	b.n	80025d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025f6:	887a      	ldrh	r2, [r7, #2]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4013      	ands	r3, r2
 80025fc:	041a      	lsls	r2, r3, #16
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	43d9      	mvns	r1, r3
 8002602:	887b      	ldrh	r3, [r7, #2]
 8002604:	400b      	ands	r3, r1
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	619a      	str	r2, [r3, #24]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
 8002634:	e007      	b.n	8002646 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002636:	4b07      	ldr	r3, [pc, #28]	; (8002654 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 0204 	bic.w	r2, r3, #4
 800263e:	4905      	ldr	r1, [pc, #20]	; (8002654 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	40030400 	.word	0x40030400

08002658 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_ICACHE_Enable+0x1c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a04      	ldr	r2, [pc, #16]	; (8002674 <HAL_ICACHE_Enable+0x1c>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	40030400 	.word	0x40030400

08002678 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800267a:	b08b      	sub	sp, #44	; 0x2c
 800267c:	af06      	add	r7, sp, #24
 800267e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e0d7      	b.n	800283a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fe fb70 	bl	8000d84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2203      	movs	r2, #3
 80026a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f003 f82b 	bl	800570c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b6:	2300      	movs	r3, #0
 80026b8:	73fb      	strb	r3, [r7, #15]
 80026ba:	e04c      	b.n	8002756 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	440b      	add	r3, r1
 80026cc:	3301      	adds	r3, #1
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	440b      	add	r3, r1
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	b298      	uxth	r0, r3
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	440b      	add	r3, r1
 80026f8:	3336      	adds	r3, #54	; 0x36
 80026fa:	4602      	mov	r2, r0
 80026fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	440b      	add	r3, r1
 800270e:	3303      	adds	r3, #3
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	3338      	adds	r3, #56	; 0x38
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	440b      	add	r3, r1
 8002736:	333c      	adds	r3, #60	; 0x3c
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	3340      	adds	r3, #64	; 0x40
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	3301      	adds	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
 8002756:	7bfa      	ldrb	r2, [r7, #15]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	429a      	cmp	r2, r3
 800275e:	d3ad      	bcc.n	80026bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002760:	2300      	movs	r3, #0
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	e044      	b.n	80027f0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002766:	7bfa      	ldrb	r2, [r7, #15]
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	440b      	add	r3, r1
 800278a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	440b      	add	r3, r1
 80027a0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027d4:	7bfa      	ldrb	r2, [r7, #15]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	440b      	add	r3, r1
 80027e2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	3301      	adds	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d3b5      	bcc.n	8002766 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	687e      	ldr	r6, [r7, #4]
 8002802:	466d      	mov	r5, sp
 8002804:	f106 0410 	add.w	r4, r6, #16
 8002808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800280a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	602b      	str	r3, [r5, #0]
 8002810:	1d33      	adds	r3, r6, #4
 8002812:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002814:	6838      	ldr	r0, [r7, #0]
 8002816:	f002 ff94 	bl	8005742 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d102      	bne.n	8002838 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f805 	bl	8002842 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002842 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002842:	b480      	push	{r7}
 8002844:	b085      	sub	sp, #20
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002866:	b29b      	uxth	r3, r3
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800287a:	b29b      	uxth	r3, r3
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40007000 	.word	0x40007000

080028b8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40007000 	.word	0x40007000

080028d4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80028dc:	4b27      	ldr	r3, [pc, #156]	; (800297c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028e4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80028e6:	f000 f861 	bl	80029ac <HAL_PWREx_SMPS_GetEffectiveMode>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f0:	d101      	bne.n	80028f6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e03e      	b.n	8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80028f6:	4b21      	ldr	r3, [pc, #132]	; (800297c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002902:	d101      	bne.n	8002908 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e035      	b.n	8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	429a      	cmp	r2, r3
 800290e:	d101      	bne.n	8002914 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e02f      	b.n	8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002914:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800291c:	4917      	ldr	r1, [pc, #92]	; (800297c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002924:	4b16      	ldr	r3, [pc, #88]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	4a16      	ldr	r2, [pc, #88]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	09db      	lsrs	r3, r3, #7
 8002932:	2232      	movs	r2, #50	; 0x32
 8002934:	fb02 f303 	mul.w	r3, r2, r3
 8002938:	4a13      	ldr	r2, [pc, #76]	; (8002988 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	08db      	lsrs	r3, r3, #3
 8002940:	3301      	adds	r3, #1
 8002942:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002944:	e002      	b.n	800294c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3b01      	subs	r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002958:	d102      	bne.n	8002960 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f2      	bne.n	8002946 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296c:	d101      	bne.n	8002972 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e000      	b.n	8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40007000 	.word	0x40007000
 8002980:	20000000 	.word	0x20000000
 8002984:	0a7c5ac5 	.word	0x0a7c5ac5
 8002988:	cccccccd 	.word	0xcccccccd

0800298c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800299a:	6053      	str	r3, [r2, #4]
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40007000 	.word	0x40007000

080029ac <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80029b2:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80029c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	e00a      	b.n	80029e0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d103      	bne.n	80029dc <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80029d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	e001      	b.n	80029e0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80029dc:	2300      	movs	r3, #0
 80029de:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80029e0:	687b      	ldr	r3, [r7, #4]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40007000 	.word	0x40007000

080029f4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d102      	bne.n	8002a08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f000 bcd0 	b.w	80033a8 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a08:	4ba3      	ldr	r3, [pc, #652]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 030c 	and.w	r3, r3, #12
 8002a10:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a12:	4ba1      	ldr	r3, [pc, #644]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80e9 	beq.w	8002bfc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d006      	beq.n	8002a3e <HAL_RCC_OscConfig+0x4a>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2b0c      	cmp	r3, #12
 8002a34:	f040 8083 	bne.w	8002b3e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d17f      	bne.n	8002b3e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a3e:	4b96      	ldr	r3, [pc, #600]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d006      	beq.n	8002a58 <HAL_RCC_OscConfig+0x64>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d102      	bne.n	8002a58 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f000 bca8 	b.w	80033a8 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5c:	4b8e      	ldr	r3, [pc, #568]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d004      	beq.n	8002a72 <HAL_RCC_OscConfig+0x7e>
 8002a68:	4b8b      	ldr	r3, [pc, #556]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a70:	e005      	b.n	8002a7e <HAL_RCC_OscConfig+0x8a>
 8002a72:	4b89      	ldr	r3, [pc, #548]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d224      	bcs.n	8002acc <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fe98 	bl	80037bc <RCC_SetFlashLatencyFromMSIRange>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	f000 bc88 	b.w	80033a8 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a98:	4b7f      	ldr	r3, [pc, #508]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a7e      	ldr	r2, [pc, #504]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002a9e:	f043 0308 	orr.w	r3, r3, #8
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4b7c      	ldr	r3, [pc, #496]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	4979      	ldr	r1, [pc, #484]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab6:	4b78      	ldr	r3, [pc, #480]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	4974      	ldr	r1, [pc, #464]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	604b      	str	r3, [r1, #4]
 8002aca:	e026      	b.n	8002b1a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002acc:	4b72      	ldr	r3, [pc, #456]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a71      	ldr	r2, [pc, #452]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002ad2:	f043 0308 	orr.w	r3, r3, #8
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4b6f      	ldr	r3, [pc, #444]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	496c      	ldr	r1, [pc, #432]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aea:	4b6b      	ldr	r3, [pc, #428]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	4967      	ldr	r1, [pc, #412]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10a      	bne.n	8002b1a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 fe57 	bl	80037bc <RCC_SetFlashLatencyFromMSIRange>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	f000 bc47 	b.w	80033a8 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b1a:	f000 fe13 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4a5e      	ldr	r2, [pc, #376]	; (8002c9c <HAL_RCC_OscConfig+0x2a8>)
 8002b22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b24:	4b5e      	ldr	r3, [pc, #376]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fe fab9 	bl	80010a0 <HAL_InitTick>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d060      	beq.n	8002bfa <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	f000 bc35 	b.w	80033a8 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d039      	beq.n	8002bba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b46:	4b54      	ldr	r3, [pc, #336]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a53      	ldr	r2, [pc, #332]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b52:	f7fe faf5 	bl	8001140 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b58:	e00f      	b.n	8002b7a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b5a:	f7fe faf1 	bl	8001140 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d908      	bls.n	8002b7a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b68:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	f000 bc17 	b.w	80033a8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b7a:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0e9      	beq.n	8002b5a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b86:	4b44      	ldr	r3, [pc, #272]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a43      	ldr	r2, [pc, #268]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002b8c:	f043 0308 	orr.w	r3, r3, #8
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	4b41      	ldr	r3, [pc, #260]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	493e      	ldr	r1, [pc, #248]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ba4:	4b3c      	ldr	r3, [pc, #240]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	4939      	ldr	r1, [pc, #228]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	604b      	str	r3, [r1, #4]
 8002bb8:	e020      	b.n	8002bfc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bba:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a36      	ldr	r2, [pc, #216]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fabb 	bl	8001140 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bcc:	e00e      	b.n	8002bec <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bce:	f7fe fab7 	bl	8001140 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d907      	bls.n	8002bec <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bdc:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e3dd      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bec:	4b2a      	ldr	r3, [pc, #168]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ea      	bne.n	8002bce <HAL_RCC_OscConfig+0x1da>
 8002bf8:	e000      	b.n	8002bfc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bfa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d07e      	beq.n	8002d06 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d005      	beq.n	8002c1a <HAL_RCC_OscConfig+0x226>
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	2b0c      	cmp	r3, #12
 8002c12:	d10e      	bne.n	8002c32 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d10b      	bne.n	8002c32 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1a:	4b1f      	ldr	r3, [pc, #124]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d06e      	beq.n	8002d04 <HAL_RCC_OscConfig+0x310>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d16a      	bne.n	8002d04 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e3ba      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x256>
 8002c3c:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a15      	ldr	r2, [pc, #84]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	e01d      	b.n	8002c86 <HAL_RCC_OscConfig+0x292>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c52:	d10c      	bne.n	8002c6e <HAL_RCC_OscConfig+0x27a>
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a0f      	ldr	r2, [pc, #60]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002c5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	e00b      	b.n	8002c86 <HAL_RCC_OscConfig+0x292>
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a09      	ldr	r2, [pc, #36]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a06      	ldr	r2, [pc, #24]	; (8002c98 <HAL_RCC_OscConfig+0x2a4>)
 8002c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d020      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fa57 	bl	8001140 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c94:	e015      	b.n	8002cc2 <HAL_RCC_OscConfig+0x2ce>
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	20000004 	.word	0x20000004
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7fe fa4c 	bl	8001140 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d907      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb2:	4b9f      	ldr	r3, [pc, #636]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e372      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cc2:	4b9b      	ldr	r3, [pc, #620]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0ea      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x2b0>
 8002cce:	e01a      	b.n	8002d06 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fa36 	bl	8001140 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cd6:	e00e      	b.n	8002cf6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7fe fa32 	bl	8001140 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d907      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ce6:	4b92      	ldr	r3, [pc, #584]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e358      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cf6:	4b8e      	ldr	r3, [pc, #568]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1ea      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x2e4>
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d06c      	beq.n	8002dec <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_OscConfig+0x330>
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	2b0c      	cmp	r3, #12
 8002d1c:	d119      	bne.n	8002d52 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d116      	bne.n	8002d52 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d24:	4b82      	ldr	r3, [pc, #520]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_OscConfig+0x348>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e335      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3c:	4b7c      	ldr	r3, [pc, #496]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	061b      	lsls	r3, r3, #24
 8002d4a:	4979      	ldr	r1, [pc, #484]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d50:	e04c      	b.n	8002dec <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d029      	beq.n	8002dae <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d5a:	4b75      	ldr	r3, [pc, #468]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a74      	ldr	r2, [pc, #464]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7fe f9eb 	bl	8001140 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d6c:	e00e      	b.n	8002d8c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6e:	f7fe f9e7 	bl	8001140 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d907      	bls.n	8002d8c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d7c:	4b6c      	ldr	r3, [pc, #432]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e30d      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d8c:	4b68      	ldr	r3, [pc, #416]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ea      	beq.n	8002d6e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d98:	4b65      	ldr	r3, [pc, #404]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	061b      	lsls	r3, r3, #24
 8002da6:	4962      	ldr	r1, [pc, #392]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
 8002dac:	e01e      	b.n	8002dec <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dae:	4b60      	ldr	r3, [pc, #384]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a5f      	ldr	r2, [pc, #380]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dba:	f7fe f9c1 	bl	8001140 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dc0:	e00e      	b.n	8002de0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7fe f9bd 	bl	8001140 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d907      	bls.n	8002de0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dd0:	4b57      	ldr	r3, [pc, #348]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e2e3      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002de0:	4b53      	ldr	r3, [pc, #332]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ea      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d05f      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d038      	beq.n	8002e72 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d108      	bne.n	8002e1a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002e08:	4b49      	ldr	r3, [pc, #292]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0e:	4a48      	ldr	r2, [pc, #288]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002e10:	f023 0310 	bic.w	r3, r3, #16
 8002e14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002e18:	e007      	b.n	8002e2a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002e1a:	4b45      	ldr	r3, [pc, #276]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e20:	4a43      	ldr	r2, [pc, #268]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002e22:	f043 0310 	orr.w	r3, r3, #16
 8002e26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2a:	4b41      	ldr	r3, [pc, #260]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e30:	4a3f      	ldr	r2, [pc, #252]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3a:	f7fe f981 	bl	8001140 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e40:	e00f      	b.n	8002e62 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e42:	f7fe f97d 	bl	8001140 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b07      	cmp	r3, #7
 8002e4e:	d908      	bls.n	8002e62 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e50:	4b37      	ldr	r3, [pc, #220]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e2a2      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e62:	4b33      	ldr	r3, [pc, #204]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0e8      	beq.n	8002e42 <HAL_RCC_OscConfig+0x44e>
 8002e70:	e022      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e72:	4b2f      	ldr	r3, [pc, #188]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e78:	4a2d      	ldr	r2, [pc, #180]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
 8002e7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7fe f95d 	bl	8001140 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e88:	e00f      	b.n	8002eaa <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e8a:	f7fe f959 	bl	8001140 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b07      	cmp	r3, #7
 8002e96:	d908      	bls.n	8002eaa <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e98:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e27e      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eaa:	4b21      	ldr	r3, [pc, #132]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e8      	bne.n	8002e8a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 8131 	beq.w	8003128 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002eca:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10d      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed6:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee2:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <HAL_RCC_OscConfig+0x53c>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef2:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <HAL_RCC_OscConfig+0x540>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d122      	bne.n	8002f44 <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002efe:	4b0d      	ldr	r3, [pc, #52]	; (8002f34 <HAL_RCC_OscConfig+0x540>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a0c      	ldr	r2, [pc, #48]	; (8002f34 <HAL_RCC_OscConfig+0x540>)
 8002f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0a:	f7fe f919 	bl	8001140 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f10:	e012      	b.n	8002f38 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f12:	f7fe f915 	bl	8001140 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d90b      	bls.n	8002f38 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f20:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <HAL_RCC_OscConfig+0x540>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d105      	bne.n	8002f38 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e23b      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f38:	4bb8      	ldr	r3, [pc, #736]	; (800321c <HAL_RCC_OscConfig+0x828>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0e6      	beq.n	8002f12 <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01f      	beq.n	8002f90 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f5c:	4bb0      	ldr	r3, [pc, #704]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	4aaf      	ldr	r2, [pc, #700]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8002f64:	f043 0304 	orr.w	r3, r3, #4
 8002f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f6c:	4bac      	ldr	r3, [pc, #688]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	4aab      	ldr	r2, [pc, #684]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f7c:	e018      	b.n	8002fb0 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f7e:	4ba8      	ldr	r3, [pc, #672]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f84:	4aa6      	ldr	r2, [pc, #664]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f8e:	e00f      	b.n	8002fb0 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f90:	4ba3      	ldr	r3, [pc, #652]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f96:	4aa2      	ldr	r2, [pc, #648]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002fa0:	4b9f      	ldr	r3, [pc, #636]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa6:	4a9e      	ldr	r2, [pc, #632]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8002fa8:	f023 0304 	bic.w	r3, r3, #4
 8002fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d068      	beq.n	800308a <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fe f8c2 	bl	8001140 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fbe:	e011      	b.n	8002fe4 <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7fe f8be 	bl	8001140 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d908      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd2:	4b93      	ldr	r3, [pc, #588]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e1e1      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe4:	4b8e      	ldr	r3, [pc, #568]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0e6      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d022      	beq.n	8003044 <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ffe:	4b88      	ldr	r3, [pc, #544]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003004:	4a86      	ldr	r2, [pc, #536]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8003006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800300e:	e011      	b.n	8003034 <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003010:	f7fe f896 	bl	8001140 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d908      	bls.n	8003034 <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003022:	4b7f      	ldr	r3, [pc, #508]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e1b9      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003034:	4b7a      	ldr	r3, [pc, #488]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0e6      	beq.n	8003010 <HAL_RCC_OscConfig+0x61c>
 8003042:	e068      	b.n	8003116 <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003044:	4b76      	ldr	r3, [pc, #472]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	4a75      	ldr	r2, [pc, #468]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 800304c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003054:	e011      	b.n	800307a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003056:	f7fe f873 	bl	8001140 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	f241 3288 	movw	r2, #5000	; 0x1388
 8003064:	4293      	cmp	r3, r2
 8003066:	d908      	bls.n	800307a <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003068:	4b6d      	ldr	r3, [pc, #436]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e196      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800307a:	4b69      	ldr	r3, [pc, #420]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e6      	bne.n	8003056 <HAL_RCC_OscConfig+0x662>
 8003088:	e045      	b.n	8003116 <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308a:	f7fe f859 	bl	8001140 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003090:	e011      	b.n	80030b6 <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fe f855 	bl	8001140 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d908      	bls.n	80030b6 <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030a4:	4b5e      	ldr	r3, [pc, #376]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e178      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030b6:	4b5a      	ldr	r3, [pc, #360]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e6      	bne.n	8003092 <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80030c4:	4b56      	ldr	r3, [pc, #344]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d021      	beq.n	8003116 <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030d2:	4b53      	ldr	r3, [pc, #332]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	4a51      	ldr	r2, [pc, #324]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 80030da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030e2:	e011      	b.n	8003108 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e4:	f7fe f82c 	bl	8001140 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d908      	bls.n	8003108 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030f6:	4b4a      	ldr	r3, [pc, #296]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e14f      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003108:	4b45      	ldr	r3, [pc, #276]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e6      	bne.n	80030e4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003116:	7ffb      	ldrb	r3, [r7, #31]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d105      	bne.n	8003128 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311c:	4b40      	ldr	r3, [pc, #256]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	4a3f      	ldr	r2, [pc, #252]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8003122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003126:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b00      	cmp	r3, #0
 8003132:	d04a      	beq.n	80031ca <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	2b00      	cmp	r3, #0
 800313a:	d023      	beq.n	8003184 <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800313c:	4b38      	ldr	r3, [pc, #224]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 800313e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003142:	4a37      	ldr	r2, [pc, #220]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7fd fff8 	bl	8001140 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003152:	e00f      	b.n	8003174 <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003154:	f7fd fff4 	bl	8001140 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d908      	bls.n	8003174 <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003162:	4b2f      	ldr	r3, [pc, #188]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8003164:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e119      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003174:	4b2a      	ldr	r3, [pc, #168]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8003176:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0e8      	beq.n	8003154 <HAL_RCC_OscConfig+0x760>
 8003182:	e022      	b.n	80031ca <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003184:	4b26      	ldr	r3, [pc, #152]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 8003186:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800318a:	4a25      	ldr	r2, [pc, #148]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003194:	f7fd ffd4 	bl	8001140 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800319a:	e00f      	b.n	80031bc <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800319c:	f7fd ffd0 	bl	8001140 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d908      	bls.n	80031bc <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031aa:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 80031ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0f5      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031bc:	4b18      	ldr	r3, [pc, #96]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 80031be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e8      	bne.n	800319c <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80e9 	beq.w	80033a6 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d4:	4b12      	ldr	r3, [pc, #72]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b0c      	cmp	r3, #12
 80031de:	f000 80a3 	beq.w	8003328 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d16a      	bne.n	80032c0 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a0c      	ldr	r2, [pc, #48]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 80031f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f6:	f7fd ffa3 	bl	8001140 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031fc:	e012      	b.n	8003224 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fe:	f7fd ff9f 	bl	8001140 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d90b      	bls.n	8003224 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800320c:	4b04      	ldr	r3, [pc, #16]	; (8003220 <HAL_RCC_OscConfig+0x82c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e0c5      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
 800321c:	40007000 	.word	0x40007000
 8003220:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003224:	4b62      	ldr	r3, [pc, #392]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e6      	bne.n	80031fe <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003230:	4b5f      	ldr	r3, [pc, #380]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	4b5f      	ldr	r3, [pc, #380]	; (80033b4 <HAL_RCC_OscConfig+0x9c0>)
 8003236:	4013      	ands	r3, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003240:	3a01      	subs	r2, #1
 8003242:	0112      	lsls	r2, r2, #4
 8003244:	4311      	orrs	r1, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800324a:	0212      	lsls	r2, r2, #8
 800324c:	4311      	orrs	r1, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003252:	0852      	lsrs	r2, r2, #1
 8003254:	3a01      	subs	r2, #1
 8003256:	0552      	lsls	r2, r2, #21
 8003258:	4311      	orrs	r1, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800325e:	0852      	lsrs	r2, r2, #1
 8003260:	3a01      	subs	r2, #1
 8003262:	0652      	lsls	r2, r2, #25
 8003264:	4311      	orrs	r1, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800326a:	06d2      	lsls	r2, r2, #27
 800326c:	430a      	orrs	r2, r1
 800326e:	4950      	ldr	r1, [pc, #320]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 8003270:	4313      	orrs	r3, r2
 8003272:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003274:	4b4e      	ldr	r3, [pc, #312]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a4d      	ldr	r2, [pc, #308]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 800327a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800327e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003280:	4b4b      	ldr	r3, [pc, #300]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4a4a      	ldr	r2, [pc, #296]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 8003286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800328a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fd ff58 	bl	8001140 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003292:	e00e      	b.n	80032b2 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003294:	f7fd ff54 	bl	8001140 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d907      	bls.n	80032b2 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a2:	4b43      	ldr	r3, [pc, #268]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e07a      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b2:	4b3f      	ldr	r3, [pc, #252]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0ea      	beq.n	8003294 <HAL_RCC_OscConfig+0x8a0>
 80032be:	e072      	b.n	80033a6 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c0:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a3a      	ldr	r2, [pc, #232]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 80032c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80032cc:	4b38      	ldr	r3, [pc, #224]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d105      	bne.n	80032e4 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80032d8:	4b35      	ldr	r3, [pc, #212]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4a34      	ldr	r2, [pc, #208]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 80032de:	f023 0303 	bic.w	r3, r3, #3
 80032e2:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80032e4:	4b32      	ldr	r3, [pc, #200]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4a31      	ldr	r2, [pc, #196]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 80032ea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80032ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fd ff24 	bl	8001140 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032fa:	e00e      	b.n	800331a <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fd ff20 	bl	8001140 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d907      	bls.n	800331a <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800330a:	4b29      	ldr	r3, [pc, #164]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e046      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800331a:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1ea      	bne.n	80032fc <HAL_RCC_OscConfig+0x908>
 8003326:	e03e      	b.n	80033a6 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e039      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003334:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <HAL_RCC_OscConfig+0x9bc>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f003 0203 	and.w	r2, r3, #3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	429a      	cmp	r2, r3
 8003346:	d12c      	bne.n	80033a2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003352:	3b01      	subs	r3, #1
 8003354:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003356:	429a      	cmp	r2, r3
 8003358:	d123      	bne.n	80033a2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003366:	429a      	cmp	r2, r3
 8003368:	d11b      	bne.n	80033a2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003374:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d113      	bne.n	80033a2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	085b      	lsrs	r3, r3, #1
 8003386:	3b01      	subs	r3, #1
 8003388:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d109      	bne.n	80033a2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	3b01      	subs	r3, #1
 800339c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d001      	beq.n	80033a6 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3720      	adds	r7, #32
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000
 80033b4:	019f800c 	.word	0x019f800c

080033b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e10d      	b.n	80035ec <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b88      	ldr	r3, [pc, #544]	; (80035f4 <HAL_RCC_ClockConfig+0x23c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d910      	bls.n	8003400 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b85      	ldr	r3, [pc, #532]	; (80035f4 <HAL_RCC_ClockConfig+0x23c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 020f 	bic.w	r2, r3, #15
 80033e6:	4983      	ldr	r1, [pc, #524]	; (80035f4 <HAL_RCC_ClockConfig+0x23c>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b81      	ldr	r3, [pc, #516]	; (80035f4 <HAL_RCC_ClockConfig+0x23c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0f5      	b.n	80035ec <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8094 	beq.w	8003536 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b03      	cmp	r3, #3
 8003414:	d134      	bne.n	8003480 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003416:	4b78      	ldr	r3, [pc, #480]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e0e2      	b.n	80035ec <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003426:	f000 fa2d 	bl	8003884 <RCC_GetSysClockFreqFromPLLSource>
 800342a:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4a73      	ldr	r2, [pc, #460]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d956      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003434:	4b70      	ldr	r3, [pc, #448]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10a      	bne.n	8003456 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003440:	4b6d      	ldr	r3, [pc, #436]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003448:	4a6b      	ldr	r2, [pc, #428]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 800344a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003450:	2380      	movs	r3, #128	; 0x80
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	e045      	b.n	80034e2 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d03f      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003466:	2b00      	cmp	r3, #0
 8003468:	d13b      	bne.n	80034e2 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800346a:	4b63      	ldr	r3, [pc, #396]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003472:	4a61      	ldr	r2, [pc, #388]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 8003474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003478:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	e030      	b.n	80034e2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d107      	bne.n	8003498 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003488:	4b5b      	ldr	r3, [pc, #364]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d115      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0a9      	b.n	80035ec <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d107      	bne.n	80034b0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034a0:	4b55      	ldr	r3, [pc, #340]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e09d      	b.n	80035ec <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b0:	4b51      	ldr	r3, [pc, #324]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e095      	b.n	80035ec <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034c0:	f000 f8a2 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4a4c      	ldr	r2, [pc, #304]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d909      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034ce:	4b4a      	ldr	r3, [pc, #296]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034d6:	4a48      	ldr	r2, [pc, #288]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 80034d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034e2:	4b45      	ldr	r3, [pc, #276]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f023 0203 	bic.w	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4942      	ldr	r1, [pc, #264]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f4:	f7fd fe24 	bl	8001140 <HAL_GetTick>
 80034f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	e013      	b.n	8003524 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fc:	f7fd fe20 	bl	8001140 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d90a      	bls.n	8003524 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	4b3a      	ldr	r3, [pc, #232]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 020c 	and.w	r2, r3, #12
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e063      	b.n	80035ec <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003524:	4b34      	ldr	r3, [pc, #208]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 020c 	and.w	r2, r3, #12
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	429a      	cmp	r2, r3
 8003534:	d1e2      	bne.n	80034fc <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003542:	4b2d      	ldr	r3, [pc, #180]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	492a      	ldr	r1, [pc, #168]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 8003550:	4313      	orrs	r3, r2
 8003552:	608b      	str	r3, [r1, #8]
 8003554:	e008      	b.n	8003568 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b80      	cmp	r3, #128	; 0x80
 800355a:	d105      	bne.n	8003568 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800355c:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a25      	ldr	r2, [pc, #148]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 8003562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003566:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003568:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <HAL_RCC_ClockConfig+0x23c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d210      	bcs.n	8003598 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b1f      	ldr	r3, [pc, #124]	; (80035f4 <HAL_RCC_ClockConfig+0x23c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 020f 	bic.w	r2, r3, #15
 800357e:	491d      	ldr	r1, [pc, #116]	; (80035f4 <HAL_RCC_ClockConfig+0x23c>)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	4313      	orrs	r3, r2
 8003584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003586:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_RCC_ClockConfig+0x23c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e029      	b.n	80035ec <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a4:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4911      	ldr	r1, [pc, #68]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035c2:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4909      	ldr	r1, [pc, #36]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80035d6:	f000 f8b5 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 80035da:	4603      	mov	r3, r0
 80035dc:	4a08      	ldr	r2, [pc, #32]	; (8003600 <HAL_RCC_ClockConfig+0x248>)
 80035de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035e0:	4b08      	ldr	r3, [pc, #32]	; (8003604 <HAL_RCC_ClockConfig+0x24c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fd fd5b 	bl	80010a0 <HAL_InitTick>
 80035ea:	4603      	mov	r3, r0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40022000 	.word	0x40022000
 80035f8:	40021000 	.word	0x40021000
 80035fc:	04c4b400 	.word	0x04c4b400
 8003600:	20000000 	.word	0x20000000
 8003604:	20000004 	.word	0x20000004

08003608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003608:	b480      	push	{r7}
 800360a:	b089      	sub	sp, #36	; 0x24
 800360c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003616:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003620:	4b44      	ldr	r3, [pc, #272]	; (8003734 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_GetSysClockFreq+0x34>
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2b0c      	cmp	r3, #12
 8003634:	d121      	bne.n	800367a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d11e      	bne.n	800367a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800363c:	4b3d      	ldr	r3, [pc, #244]	; (8003734 <HAL_RCC_GetSysClockFreq+0x12c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d107      	bne.n	8003658 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003648:	4b3a      	ldr	r3, [pc, #232]	; (8003734 <HAL_RCC_GetSysClockFreq+0x12c>)
 800364a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	e005      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003658:	4b36      	ldr	r3, [pc, #216]	; (8003734 <HAL_RCC_GetSysClockFreq+0x12c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003664:	4a34      	ldr	r2, [pc, #208]	; (8003738 <HAL_RCC_GetSysClockFreq+0x130>)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10d      	bne.n	8003690 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d102      	bne.n	8003686 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003680:	4b2e      	ldr	r3, [pc, #184]	; (800373c <HAL_RCC_GetSysClockFreq+0x134>)
 8003682:	61bb      	str	r3, [r7, #24]
 8003684:	e004      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b08      	cmp	r3, #8
 800368a:	d101      	bne.n	8003690 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800368c:	4b2c      	ldr	r3, [pc, #176]	; (8003740 <HAL_RCC_GetSysClockFreq+0x138>)
 800368e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	2b0c      	cmp	r3, #12
 8003694:	d146      	bne.n	8003724 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003696:	4b27      	ldr	r3, [pc, #156]	; (8003734 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036a0:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	3301      	adds	r3, #1
 80036ac:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d003      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0xb4>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d00d      	beq.n	80036d6 <HAL_RCC_GetSysClockFreq+0xce>
 80036ba:	e019      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036bc:	4a1f      	ldr	r2, [pc, #124]	; (800373c <HAL_RCC_GetSysClockFreq+0x134>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c4:	4a1b      	ldr	r2, [pc, #108]	; (8003734 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036c6:	68d2      	ldr	r2, [r2, #12]
 80036c8:	0a12      	lsrs	r2, r2, #8
 80036ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	617b      	str	r3, [r7, #20]
        break;
 80036d4:	e019      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036d6:	4a1a      	ldr	r2, [pc, #104]	; (8003740 <HAL_RCC_GetSysClockFreq+0x138>)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	fbb2 f3f3 	udiv	r3, r2, r3
 80036de:	4a15      	ldr	r2, [pc, #84]	; (8003734 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036e0:	68d2      	ldr	r2, [r2, #12]
 80036e2:	0a12      	lsrs	r2, r2, #8
 80036e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036e8:	fb02 f303 	mul.w	r3, r2, r3
 80036ec:	617b      	str	r3, [r7, #20]
        break;
 80036ee:	e00c      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	4a0e      	ldr	r2, [pc, #56]	; (8003734 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036fa:	68d2      	ldr	r2, [r2, #12]
 80036fc:	0a12      	lsrs	r2, r2, #8
 80036fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003702:	fb02 f303 	mul.w	r3, r2, r3
 8003706:	617b      	str	r3, [r7, #20]
        break;
 8003708:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800370a:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <HAL_RCC_GetSysClockFreq+0x12c>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	0e5b      	lsrs	r3, r3, #25
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	3301      	adds	r3, #1
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003722:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003724:	69bb      	ldr	r3, [r7, #24]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3724      	adds	r7, #36	; 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40021000 	.word	0x40021000
 8003738:	0800580c 	.word	0x0800580c
 800373c:	00f42400 	.word	0x00f42400
 8003740:	007a1200 	.word	0x007a1200

08003744 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003748:	f7ff ff5e 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 800374c:	4602      	mov	r2, r0
 800374e:	4b05      	ldr	r3, [pc, #20]	; (8003764 <HAL_RCC_GetHCLKFreq+0x20>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	091b      	lsrs	r3, r3, #4
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	4903      	ldr	r1, [pc, #12]	; (8003768 <HAL_RCC_GetHCLKFreq+0x24>)
 800375a:	5ccb      	ldrb	r3, [r1, r3]
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003760:	4618      	mov	r0, r3
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000
 8003768:	080057f4 	.word	0x080057f4

0800376c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003770:	f7ff ffe8 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4903      	ldr	r1, [pc, #12]	; (8003790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000
 8003790:	08005804 	.word	0x08005804

08003794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003798:	f7ff ffd4 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	0adb      	lsrs	r3, r3, #11
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4903      	ldr	r1, [pc, #12]	; (80037b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40021000 	.word	0x40021000
 80037b8:	08005804 	.word	0x08005804

080037bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037c8:	4b2c      	ldr	r3, [pc, #176]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037d4:	f7ff f870 	bl	80028b8 <HAL_PWREx_GetVoltageRange>
 80037d8:	6138      	str	r0, [r7, #16]
 80037da:	e014      	b.n	8003806 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037dc:	4b27      	ldr	r3, [pc, #156]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80037de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e0:	4a26      	ldr	r2, [pc, #152]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80037e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e6:	6593      	str	r3, [r2, #88]	; 0x58
 80037e8:	4b24      	ldr	r3, [pc, #144]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80037ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037f4:	f7ff f860 	bl	80028b8 <HAL_PWREx_GetVoltageRange>
 80037f8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037fa:	4b20      	ldr	r3, [pc, #128]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	4a1f      	ldr	r2, [pc, #124]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003804:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003812:	d10b      	bne.n	800382c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b80      	cmp	r3, #128	; 0x80
 8003818:	d919      	bls.n	800384e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2ba0      	cmp	r3, #160	; 0xa0
 800381e:	d902      	bls.n	8003826 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003820:	2302      	movs	r3, #2
 8003822:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003824:	e013      	b.n	800384e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003826:	2301      	movs	r3, #1
 8003828:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800382a:	e010      	b.n	800384e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b80      	cmp	r3, #128	; 0x80
 8003830:	d902      	bls.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003832:	2303      	movs	r3, #3
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	e00a      	b.n	800384e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b80      	cmp	r3, #128	; 0x80
 800383c:	d102      	bne.n	8003844 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800383e:	2302      	movs	r3, #2
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	e004      	b.n	800384e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b70      	cmp	r3, #112	; 0x70
 8003848:	d101      	bne.n	800384e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800384a:	2301      	movs	r3, #1
 800384c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800384e:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 020f 	bic.w	r2, r3, #15
 8003856:	490a      	ldr	r1, [pc, #40]	; (8003880 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800385e:	4b08      	ldr	r3, [pc, #32]	; (8003880 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	429a      	cmp	r2, r3
 800386a:	d001      	beq.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40021000 	.word	0x40021000
 8003880:	40022000 	.word	0x40022000

08003884 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800388e:	4b36      	ldr	r3, [pc, #216]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	2b01      	cmp	r3, #1
 8003898:	d118      	bne.n	80038cc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800389a:	4b33      	ldr	r3, [pc, #204]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d107      	bne.n	80038b6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038a6:	4b30      	ldr	r3, [pc, #192]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80038a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ac:	0a1b      	lsrs	r3, r3, #8
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	e005      	b.n	80038c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038b6:	4b2c      	ldr	r3, [pc, #176]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	091b      	lsrs	r3, r3, #4
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80038c2:	4a2a      	ldr	r2, [pc, #168]	; (800396c <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ca:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038cc:	4b26      	ldr	r3, [pc, #152]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038d6:	4b24      	ldr	r3, [pc, #144]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	3301      	adds	r3, #1
 80038e2:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d003      	beq.n	80038f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d00d      	beq.n	800390c <RCC_GetSysClockFreqFromPLLSource+0x88>
 80038f0:	e019      	b.n	8003926 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038f2:	4a1f      	ldr	r2, [pc, #124]	; (8003970 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	4a1b      	ldr	r2, [pc, #108]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80038fc:	68d2      	ldr	r2, [r2, #12]
 80038fe:	0a12      	lsrs	r2, r2, #8
 8003900:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003904:	fb02 f303 	mul.w	r3, r2, r3
 8003908:	613b      	str	r3, [r7, #16]
      break;
 800390a:	e019      	b.n	8003940 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800390c:	4a19      	ldr	r2, [pc, #100]	; (8003974 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	fbb2 f3f3 	udiv	r3, r2, r3
 8003914:	4a14      	ldr	r2, [pc, #80]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003916:	68d2      	ldr	r2, [r2, #12]
 8003918:	0a12      	lsrs	r2, r2, #8
 800391a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	613b      	str	r3, [r7, #16]
      break;
 8003924:	e00c      	b.n	8003940 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	fbb2 f3f3 	udiv	r3, r2, r3
 800392e:	4a0e      	ldr	r2, [pc, #56]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003930:	68d2      	ldr	r2, [r2, #12]
 8003932:	0a12      	lsrs	r2, r2, #8
 8003934:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003938:	fb02 f303 	mul.w	r3, r2, r3
 800393c:	613b      	str	r3, [r7, #16]
      break;
 800393e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003940:	4b09      	ldr	r3, [pc, #36]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	0e5b      	lsrs	r3, r3, #25
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	3301      	adds	r3, #1
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800395a:	683b      	ldr	r3, [r7, #0]
}
 800395c:	4618      	mov	r0, r3
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40021000 	.word	0x40021000
 800396c:	0800580c 	.word	0x0800580c
 8003970:	00f42400 	.word	0x00f42400
 8003974:	007a1200 	.word	0x007a1200

08003978 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003980:	2300      	movs	r3, #0
 8003982:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003984:	2300      	movs	r3, #0
 8003986:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003990:	2b00      	cmp	r3, #0
 8003992:	d040      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003998:	2b80      	cmp	r3, #128	; 0x80
 800399a:	d02a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800399c:	2b80      	cmp	r3, #128	; 0x80
 800399e:	d825      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80039a0:	2b60      	cmp	r3, #96	; 0x60
 80039a2:	d026      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80039a4:	2b60      	cmp	r3, #96	; 0x60
 80039a6:	d821      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80039a8:	2b40      	cmp	r3, #64	; 0x40
 80039aa:	d006      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x42>
 80039ac:	2b40      	cmp	r3, #64	; 0x40
 80039ae:	d81d      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d009      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d010      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x62>
 80039b8:	e018      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039ba:	4b8f      	ldr	r3, [pc, #572]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	4a8e      	ldr	r2, [pc, #568]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039c6:	e015      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	2100      	movs	r1, #0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fb56 	bl	8004080 <RCCEx_PLLSAI1_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039d8:	e00c      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3320      	adds	r3, #32
 80039de:	2100      	movs	r1, #0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fc33 	bl	800424c <RCCEx_PLLSAI2_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039ea:	e003      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	77fb      	strb	r3, [r7, #31]
        break;
 80039f0:	e000      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80039f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f4:	7ffb      	ldrb	r3, [r7, #31]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10b      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039fa:	4b7f      	ldr	r3, [pc, #508]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a00:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a08:	497b      	ldr	r1, [pc, #492]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003a10:	e001      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a12:	7ffb      	ldrb	r3, [r7, #31]
 8003a14:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d047      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a2a:	d030      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a30:	d82a      	bhi.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a36:	d02a      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a3c:	d824      	bhi.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a42:	d008      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a48:	d81e      	bhi.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a52:	d010      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a54:	e018      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a56:	4b68      	ldr	r3, [pc, #416]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	4a67      	ldr	r2, [pc, #412]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003a62:	e015      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3304      	adds	r3, #4
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fb08 	bl	8004080 <RCCEx_PLLSAI1_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003a74:	e00c      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3320      	adds	r3, #32
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fbe5 	bl	800424c <RCCEx_PLLSAI2_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003a86:	e003      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	77fb      	strb	r3, [r7, #31]
        break;
 8003a8c:	e000      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a90:	7ffb      	ldrb	r3, [r7, #31]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10b      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a96:	4b58      	ldr	r3, [pc, #352]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4954      	ldr	r1, [pc, #336]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003aac:	e001      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aae:	7ffb      	ldrb	r3, [r7, #31]
 8003ab0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80ab 	beq.w	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac4:	4b4c      	ldr	r3, [pc, #304]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10d      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad0:	4b49      	ldr	r3, [pc, #292]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad4:	4a48      	ldr	r2, [pc, #288]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ada:	6593      	str	r3, [r2, #88]	; 0x58
 8003adc:	4b46      	ldr	r3, [pc, #280]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aec:	4b43      	ldr	r3, [pc, #268]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a42      	ldr	r2, [pc, #264]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003af8:	f7fd fb22 	bl	8001140 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003afe:	e00f      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b00:	f7fd fb1e 	bl	8001140 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d908      	bls.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b0e:	4b3b      	ldr	r3, [pc, #236]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003b1e:	e006      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b20:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0e9      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003b2c:	e000      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003b2e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003b30:	7ffb      	ldrb	r3, [r7, #31]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d164      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b36:	4b30      	ldr	r3, [pc, #192]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b40:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01f      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d019      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b54:	4b28      	ldr	r3, [pc, #160]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b60:	4b25      	ldr	r3, [pc, #148]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	4a24      	ldr	r2, [pc, #144]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b70:	4b21      	ldr	r3, [pc, #132]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	4a20      	ldr	r2, [pc, #128]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b80:	4a1d      	ldr	r2, [pc, #116]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d01f      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b92:	f7fd fad5 	bl	8001140 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b98:	e012      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9a:	f7fd fad1 	bl	8001140 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d909      	bls.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bac:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003bbe:	e007      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc0:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0e5      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003bce:	e000      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003bd0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003bd2:	7ffb      	ldrb	r3, [r7, #31]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10c      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bd8:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be8:	4903      	ldr	r1, [pc, #12]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bf0:	e008      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bf2:	7ffb      	ldrb	r3, [r7, #31]
 8003bf4:	77bb      	strb	r3, [r7, #30]
 8003bf6:	e005      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c00:	7ffb      	ldrb	r3, [r7, #31]
 8003c02:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d105      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0a:	4baf      	ldr	r3, [pc, #700]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0e:	4aae      	ldr	r2, [pc, #696]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c22:	4ba9      	ldr	r3, [pc, #676]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c28:	f023 0203 	bic.w	r2, r3, #3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c30:	49a5      	ldr	r1, [pc, #660]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c44:	4ba0      	ldr	r3, [pc, #640]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f023 020c 	bic.w	r2, r3, #12
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c52:	499d      	ldr	r1, [pc, #628]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c66:	4b98      	ldr	r3, [pc, #608]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c74:	4994      	ldr	r1, [pc, #592]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c88:	4b8f      	ldr	r3, [pc, #572]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	498c      	ldr	r1, [pc, #560]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003caa:	4b87      	ldr	r3, [pc, #540]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	4983      	ldr	r1, [pc, #524]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ccc:	4b7e      	ldr	r3, [pc, #504]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cda:	497b      	ldr	r1, [pc, #492]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cee:	4b76      	ldr	r3, [pc, #472]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfc:	4972      	ldr	r1, [pc, #456]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d10:	4b6d      	ldr	r3, [pc, #436]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1e:	496a      	ldr	r1, [pc, #424]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003d32:	4b65      	ldr	r3, [pc, #404]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d40:	4961      	ldr	r1, [pc, #388]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d031      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d5c:	d00e      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d62:	d814      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d015      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d6c:	d10f      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d6e:	4b56      	ldr	r3, [pc, #344]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	4a55      	ldr	r2, [pc, #340]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d78:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003d7a:	e00c      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 f97c 	bl	8004080 <RCCEx_PLLSAI1_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003d8c:	e003      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	77fb      	strb	r3, [r7, #31]
        break;
 8003d92:	e000      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d96:	7ffb      	ldrb	r3, [r7, #31]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10b      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d9c:	4b4a      	ldr	r3, [pc, #296]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003daa:	4947      	ldr	r1, [pc, #284]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003db2:	e001      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db4:	7ffb      	ldrb	r3, [r7, #31]
 8003db6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dc4:	4b40      	ldr	r3, [pc, #256]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	493d      	ldr	r1, [pc, #244]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003de6:	4b38      	ldr	r3, [pc, #224]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df4:	4934      	ldr	r1, [pc, #208]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e08:	4b2f      	ldr	r3, [pc, #188]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	492c      	ldr	r1, [pc, #176]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e2a:	4b27      	ldr	r3, [pc, #156]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e30:	f023 0203 	bic.w	r2, r3, #3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e38:	4923      	ldr	r1, [pc, #140]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d028      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x526>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5a:	491b      	ldr	r1, [pc, #108]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e6a:	d106      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e6c:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4a15      	ldr	r2, [pc, #84]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e76:	60d3      	str	r3, [r2, #12]
 8003e78:	e011      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x526>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e82:	d10c      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x526>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3304      	adds	r3, #4
 8003e88:	2101      	movs	r1, #1
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f8f8 	bl	8004080 <RCCEx_PLLSAI1_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003e94:	7ffb      	ldrb	r3, [r7, #31]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x526>
        {
          /* set overall return value */
          status = ret;
 8003e9a:	7ffb      	ldrb	r3, [r7, #31]
 8003e9c:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d04d      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eb2:	d10b      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003eb4:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eba:	4a03      	ldr	r2, [pc, #12]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ec0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003ec4:	e015      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003ec6:	bf00      	nop
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	4b6b      	ldr	r3, [pc, #428]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eda:	4968      	ldr	r1, [pc, #416]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ee2:	4b66      	ldr	r3, [pc, #408]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ee4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ee8:	4a64      	ldr	r2, [pc, #400]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003eea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ef6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003efa:	d10d      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	2101      	movs	r1, #1
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 f8bc 	bl	8004080 <RCCEx_PLLSAI1_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003f0c:	7ffb      	ldrb	r3, [r7, #31]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d019      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8003f12:	7ffb      	ldrb	r3, [r7, #31]
 8003f14:	77bb      	strb	r3, [r7, #30]
 8003f16:	e016      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f20:	d106      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f22:	4b56      	ldr	r3, [pc, #344]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	4a55      	ldr	r2, [pc, #340]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f2c:	60d3      	str	r3, [r2, #12]
 8003f2e:	e00a      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f38:	d105      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f3a:	4b50      	ldr	r3, [pc, #320]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	4a4f      	ldr	r2, [pc, #316]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f44:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d028      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f52:	4b4a      	ldr	r3, [pc, #296]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f60:	4946      	ldr	r1, [pc, #280]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f70:	d106      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f72:	4b42      	ldr	r3, [pc, #264]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	4a41      	ldr	r2, [pc, #260]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f7c:	60d3      	str	r3, [r2, #12]
 8003f7e:	e011      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f88:	d10c      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	2101      	movs	r1, #1
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 f875 	bl	8004080 <RCCEx_PLLSAI1_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003f9a:	7ffb      	ldrb	r3, [r7, #31]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8003fa0:	7ffb      	ldrb	r3, [r7, #31]
 8003fa2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01e      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fb0:	4b32      	ldr	r3, [pc, #200]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fc0:	492e      	ldr	r1, [pc, #184]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fd2:	d10c      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	2102      	movs	r1, #2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 f850 	bl	8004080 <RCCEx_PLLSAI1_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003fe4:	7ffb      	ldrb	r3, [r7, #31]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8003fea:	7ffb      	ldrb	r3, [r7, #31]
 8003fec:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00b      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ffa:	4b20      	ldr	r3, [pc, #128]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004000:	f023 0204 	bic.w	r2, r3, #4
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400a:	491c      	ldr	r1, [pc, #112]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800401e:	4b17      	ldr	r3, [pc, #92]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004020:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004024:	f023 0218 	bic.w	r2, r3, #24
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	4913      	ldr	r1, [pc, #76]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d017      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004042:	4b0e      	ldr	r3, [pc, #56]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004044:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004048:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004052:	490a      	ldr	r1, [pc, #40]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004060:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004064:	d105      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	4a04      	ldr	r2, [pc, #16]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800406c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004070:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004072:	7fbb      	ldrb	r3, [r7, #30]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40021000 	.word	0x40021000

08004080 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b03      	cmp	r3, #3
 8004094:	d018      	beq.n	80040c8 <RCCEx_PLLSAI1_Config+0x48>
 8004096:	2b03      	cmp	r3, #3
 8004098:	d81f      	bhi.n	80040da <RCCEx_PLLSAI1_Config+0x5a>
 800409a:	2b01      	cmp	r3, #1
 800409c:	d002      	beq.n	80040a4 <RCCEx_PLLSAI1_Config+0x24>
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d009      	beq.n	80040b6 <RCCEx_PLLSAI1_Config+0x36>
 80040a2:	e01a      	b.n	80040da <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040a4:	4b65      	ldr	r3, [pc, #404]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d117      	bne.n	80040e0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040b4:	e014      	b.n	80040e0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040b6:	4b61      	ldr	r3, [pc, #388]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d110      	bne.n	80040e4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040c6:	e00d      	b.n	80040e4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80040c8:	4b5c      	ldr	r3, [pc, #368]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d8:	e006      	b.n	80040e8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	73fb      	strb	r3, [r7, #15]
      break;
 80040de:	e004      	b.n	80040ea <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80040e0:	bf00      	nop
 80040e2:	e002      	b.n	80040ea <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80040e4:	bf00      	nop
 80040e6:	e000      	b.n	80040ea <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80040e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f040 809f 	bne.w	8004230 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040f2:	4b52      	ldr	r3, [pc, #328]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a51      	ldr	r2, [pc, #324]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 80040f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040fe:	f7fd f81f 	bl	8001140 <HAL_GetTick>
 8004102:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004104:	e00f      	b.n	8004126 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004106:	f7fd f81b 	bl	8001140 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d908      	bls.n	8004126 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004114:	4b49      	ldr	r3, [pc, #292]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004124:	e006      	b.n	8004134 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004126:	4b45      	ldr	r3, [pc, #276]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e9      	bne.n	8004106 <RCCEx_PLLSAI1_Config+0x86>
 8004132:	e000      	b.n	8004136 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004134:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d179      	bne.n	8004230 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d116      	bne.n	8004170 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004142:	4b3e      	ldr	r3, [pc, #248]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	4b3e      	ldr	r3, [pc, #248]	; (8004240 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004148:	4013      	ands	r3, r2
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6892      	ldr	r2, [r2, #8]
 800414e:	0211      	lsls	r1, r2, #8
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	68d2      	ldr	r2, [r2, #12]
 8004154:	06d2      	lsls	r2, r2, #27
 8004156:	4311      	orrs	r1, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6852      	ldr	r2, [r2, #4]
 800415c:	3a01      	subs	r2, #1
 800415e:	0112      	lsls	r2, r2, #4
 8004160:	4311      	orrs	r1, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	4934      	ldr	r1, [pc, #208]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 800416a:	4313      	orrs	r3, r2
 800416c:	610b      	str	r3, [r1, #16]
 800416e:	e033      	b.n	80041d8 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d118      	bne.n	80041a8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004176:	4b31      	ldr	r3, [pc, #196]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	4b32      	ldr	r3, [pc, #200]	; (8004244 <RCCEx_PLLSAI1_Config+0x1c4>)
 800417c:	4013      	ands	r3, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6892      	ldr	r2, [r2, #8]
 8004182:	0211      	lsls	r1, r2, #8
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6912      	ldr	r2, [r2, #16]
 8004188:	0852      	lsrs	r2, r2, #1
 800418a:	3a01      	subs	r2, #1
 800418c:	0552      	lsls	r2, r2, #21
 800418e:	4311      	orrs	r1, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6852      	ldr	r2, [r2, #4]
 8004194:	3a01      	subs	r2, #1
 8004196:	0112      	lsls	r2, r2, #4
 8004198:	4311      	orrs	r1, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	4926      	ldr	r1, [pc, #152]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	610b      	str	r3, [r1, #16]
 80041a6:	e017      	b.n	80041d8 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041a8:	4b24      	ldr	r3, [pc, #144]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	4b26      	ldr	r3, [pc, #152]	; (8004248 <RCCEx_PLLSAI1_Config+0x1c8>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6892      	ldr	r2, [r2, #8]
 80041b4:	0211      	lsls	r1, r2, #8
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6952      	ldr	r2, [r2, #20]
 80041ba:	0852      	lsrs	r2, r2, #1
 80041bc:	3a01      	subs	r2, #1
 80041be:	0652      	lsls	r2, r2, #25
 80041c0:	4311      	orrs	r1, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6852      	ldr	r2, [r2, #4]
 80041c6:	3a01      	subs	r2, #1
 80041c8:	0112      	lsls	r2, r2, #4
 80041ca:	4311      	orrs	r1, r2
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	491a      	ldr	r1, [pc, #104]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041d8:	4b18      	ldr	r3, [pc, #96]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a17      	ldr	r2, [pc, #92]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fc ffac 	bl	8001140 <HAL_GetTick>
 80041e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041ea:	e00f      	b.n	800420c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041ec:	f7fc ffa8 	bl	8001140 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d908      	bls.n	800420c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041fa:	4b10      	ldr	r3, [pc, #64]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800420a:	e006      	b.n	800421a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0e9      	beq.n	80041ec <RCCEx_PLLSAI1_Config+0x16c>
 8004218:	e000      	b.n	800421c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800421a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004222:	4b06      	ldr	r3, [pc, #24]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	4904      	ldr	r1, [pc, #16]	; (800423c <RCCEx_PLLSAI1_Config+0x1bc>)
 800422c:	4313      	orrs	r3, r2
 800422e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004230:	7bfb      	ldrb	r3, [r7, #15]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000
 8004240:	07ff800c 	.word	0x07ff800c
 8004244:	ff9f800c 	.word	0xff9f800c
 8004248:	f9ff800c 	.word	0xf9ff800c

0800424c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b03      	cmp	r3, #3
 8004260:	d018      	beq.n	8004294 <RCCEx_PLLSAI2_Config+0x48>
 8004262:	2b03      	cmp	r3, #3
 8004264:	d81f      	bhi.n	80042a6 <RCCEx_PLLSAI2_Config+0x5a>
 8004266:	2b01      	cmp	r3, #1
 8004268:	d002      	beq.n	8004270 <RCCEx_PLLSAI2_Config+0x24>
 800426a:	2b02      	cmp	r3, #2
 800426c:	d009      	beq.n	8004282 <RCCEx_PLLSAI2_Config+0x36>
 800426e:	e01a      	b.n	80042a6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004270:	4b4a      	ldr	r3, [pc, #296]	; (800439c <RCCEx_PLLSAI2_Config+0x150>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d117      	bne.n	80042ac <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004280:	e014      	b.n	80042ac <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004282:	4b46      	ldr	r3, [pc, #280]	; (800439c <RCCEx_PLLSAI2_Config+0x150>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428a:	2b00      	cmp	r3, #0
 800428c:	d110      	bne.n	80042b0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004292:	e00d      	b.n	80042b0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004294:	4b41      	ldr	r3, [pc, #260]	; (800439c <RCCEx_PLLSAI2_Config+0x150>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d109      	bne.n	80042b4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a4:	e006      	b.n	80042b4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
      break;
 80042aa:	e004      	b.n	80042b6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80042ac:	bf00      	nop
 80042ae:	e002      	b.n	80042b6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80042b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d169      	bne.n	8004390 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042bc:	4b37      	ldr	r3, [pc, #220]	; (800439c <RCCEx_PLLSAI2_Config+0x150>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a36      	ldr	r2, [pc, #216]	; (800439c <RCCEx_PLLSAI2_Config+0x150>)
 80042c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c8:	f7fc ff3a 	bl	8001140 <HAL_GetTick>
 80042cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042ce:	e00f      	b.n	80042f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042d0:	f7fc ff36 	bl	8001140 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d908      	bls.n	80042f0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042de:	4b2f      	ldr	r3, [pc, #188]	; (800439c <RCCEx_PLLSAI2_Config+0x150>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042ee:	e006      	b.n	80042fe <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042f0:	4b2a      	ldr	r3, [pc, #168]	; (800439c <RCCEx_PLLSAI2_Config+0x150>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e9      	bne.n	80042d0 <RCCEx_PLLSAI2_Config+0x84>
 80042fc:	e000      	b.n	8004300 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80042fe:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d144      	bne.n	8004390 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d115      	bne.n	8004338 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800430c:	4b23      	ldr	r3, [pc, #140]	; (800439c <RCCEx_PLLSAI2_Config+0x150>)
 800430e:	695a      	ldr	r2, [r3, #20]
 8004310:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <RCCEx_PLLSAI2_Config+0x154>)
 8004312:	4013      	ands	r3, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6892      	ldr	r2, [r2, #8]
 8004318:	0211      	lsls	r1, r2, #8
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	68d2      	ldr	r2, [r2, #12]
 800431e:	06d2      	lsls	r2, r2, #27
 8004320:	4311      	orrs	r1, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6852      	ldr	r2, [r2, #4]
 8004326:	3a01      	subs	r2, #1
 8004328:	0112      	lsls	r2, r2, #4
 800432a:	4311      	orrs	r1, r2
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	491a      	ldr	r1, [pc, #104]	; (800439c <RCCEx_PLLSAI2_Config+0x150>)
 8004334:	4313      	orrs	r3, r2
 8004336:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004338:	4b18      	ldr	r3, [pc, #96]	; (800439c <RCCEx_PLLSAI2_Config+0x150>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a17      	ldr	r2, [pc, #92]	; (800439c <RCCEx_PLLSAI2_Config+0x150>)
 800433e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004342:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004344:	f7fc fefc 	bl	8001140 <HAL_GetTick>
 8004348:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800434a:	e00f      	b.n	800436c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800434c:	f7fc fef8 	bl	8001140 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d908      	bls.n	800436c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800435a:	4b10      	ldr	r3, [pc, #64]	; (800439c <RCCEx_PLLSAI2_Config+0x150>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d109      	bne.n	800437a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800436a:	e006      	b.n	800437a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <RCCEx_PLLSAI2_Config+0x150>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0e9      	beq.n	800434c <RCCEx_PLLSAI2_Config+0x100>
 8004378:	e000      	b.n	800437c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800437a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <RCCEx_PLLSAI2_Config+0x150>)
 8004384:	695a      	ldr	r2, [r3, #20]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	4904      	ldr	r1, [pc, #16]	; (800439c <RCCEx_PLLSAI2_Config+0x150>)
 800438c:	4313      	orrs	r3, r2
 800438e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004390:	7bfb      	ldrb	r3, [r7, #15]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000
 80043a0:	07ff800c 	.word	0x07ff800c

080043a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d05c      	beq.n	8004470 <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fc fc9c 	bl	8000d08 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043d8:	4b28      	ldr	r3, [pc, #160]	; (800447c <HAL_RTC_Init+0xd8>)
 80043da:	22ca      	movs	r2, #202	; 0xca
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24
 80043de:	4b27      	ldr	r3, [pc, #156]	; (800447c <HAL_RTC_Init+0xd8>)
 80043e0:	2253      	movs	r2, #83	; 0x53
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f98d 	bl	8004704 <RTC_EnterInitMode>
 80043ea:	4603      	mov	r3, r0
 80043ec:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d133      	bne.n	800445c <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80043f4:	4b21      	ldr	r3, [pc, #132]	; (800447c <HAL_RTC_Init+0xd8>)
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	4a20      	ldr	r2, [pc, #128]	; (800447c <HAL_RTC_Init+0xd8>)
 80043fa:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80043fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004402:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004404:	4b1d      	ldr	r3, [pc, #116]	; (800447c <HAL_RTC_Init+0xd8>)
 8004406:	699a      	ldr	r2, [r3, #24]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6859      	ldr	r1, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	4319      	orrs	r1, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	430b      	orrs	r3, r1
 8004418:	4918      	ldr	r1, [pc, #96]	; (800447c <HAL_RTC_Init+0xd8>)
 800441a:	4313      	orrs	r3, r2
 800441c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	041b      	lsls	r3, r3, #16
 8004428:	4914      	ldr	r1, [pc, #80]	; (800447c <HAL_RTC_Init+0xd8>)
 800442a:	4313      	orrs	r3, r2
 800442c:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f99c 	bl	800476c <RTC_ExitInitMode>
 8004434:	4603      	mov	r3, r0
 8004436:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10e      	bne.n	800445c <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 800443e:	4b0f      	ldr	r3, [pc, #60]	; (800447c <HAL_RTC_Init+0xd8>)
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a19      	ldr	r1, [r3, #32]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	4319      	orrs	r1, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	430b      	orrs	r3, r1
 8004456:	4909      	ldr	r1, [pc, #36]	; (800447c <HAL_RTC_Init+0xd8>)
 8004458:	4313      	orrs	r3, r2
 800445a:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800445c:	4b07      	ldr	r3, [pc, #28]	; (800447c <HAL_RTC_Init+0xd8>)
 800445e:	22ff      	movs	r2, #255	; 0xff
 8004460:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d103      	bne.n	8004470 <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004470:	7bfb      	ldrb	r3, [r7, #15]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40002800 	.word	0x40002800

08004480 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004480:	b590      	push	{r4, r7, lr}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_RTC_SetTime+0x1a>
 8004496:	2302      	movs	r3, #2
 8004498:	e081      	b.n	800459e <HAL_RTC_SetTime+0x11e>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2202      	movs	r2, #2
 80044a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044aa:	4b3f      	ldr	r3, [pc, #252]	; (80045a8 <HAL_RTC_SetTime+0x128>)
 80044ac:	22ca      	movs	r2, #202	; 0xca
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24
 80044b0:	4b3d      	ldr	r3, [pc, #244]	; (80045a8 <HAL_RTC_SetTime+0x128>)
 80044b2:	2253      	movs	r2, #83	; 0x53
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 f924 	bl	8004704 <RTC_EnterInitMode>
 80044bc:	4603      	mov	r3, r0
 80044be:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80044c0:	7cfb      	ldrb	r3, [r7, #19]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d15c      	bne.n	8004580 <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d125      	bne.n	8004518 <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80044cc:	4b36      	ldr	r3, [pc, #216]	; (80045a8 <HAL_RTC_SetTime+0x128>)
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d102      	bne.n	80044de <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2200      	movs	r2, #0
 80044dc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 f980 	bl	80047e8 <RTC_ByteToBcd2>
 80044e8:	4603      	mov	r3, r0
 80044ea:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	785b      	ldrb	r3, [r3, #1]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 f979 	bl	80047e8 <RTC_ByteToBcd2>
 80044f6:	4603      	mov	r3, r0
 80044f8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044fa:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	789b      	ldrb	r3, [r3, #2]
 8004500:	4618      	mov	r0, r3
 8004502:	f000 f971 	bl	80047e8 <RTC_ByteToBcd2>
 8004506:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004508:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	78db      	ldrb	r3, [r3, #3]
 8004510:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	e017      	b.n	8004548 <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004518:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <HAL_RTC_SetTime+0x128>)
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	d102      	bne.n	800452a <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2200      	movs	r2, #0
 8004528:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	785b      	ldrb	r3, [r3, #1]
 8004534:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004536:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800453c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	78db      	ldrb	r3, [r3, #3]
 8004542:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8004548:	4a17      	ldr	r2, [pc, #92]	; (80045a8 <HAL_RTC_SetTime+0x128>)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004550:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004554:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8004556:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <HAL_RTC_SetTime+0x128>)
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	4a13      	ldr	r2, [pc, #76]	; (80045a8 <HAL_RTC_SetTime+0x128>)
 800455c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004560:	6193      	str	r3, [r2, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8004562:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <HAL_RTC_SetTime+0x128>)
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	68d9      	ldr	r1, [r3, #12]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	430b      	orrs	r3, r1
 8004570:	490d      	ldr	r1, [pc, #52]	; (80045a8 <HAL_RTC_SetTime+0x128>)
 8004572:	4313      	orrs	r3, r2
 8004574:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f8f8 	bl	800476c <RTC_ExitInitMode>
 800457c:	4603      	mov	r3, r0
 800457e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004580:	4b09      	ldr	r3, [pc, #36]	; (80045a8 <HAL_RTC_SetTime+0x128>)
 8004582:	22ff      	movs	r2, #255	; 0xff
 8004584:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004586:	7cfb      	ldrb	r3, [r7, #19]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d103      	bne.n	8004594 <HAL_RTC_SetTime+0x114>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800459c:	7cfb      	ldrb	r3, [r7, #19]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd90      	pop	{r4, r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40002800 	.word	0x40002800

080045ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045ac:	b590      	push	{r4, r7, lr}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_RTC_SetDate+0x1a>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e071      	b.n	80046aa <HAL_RTC_SetDate+0xfe>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2202      	movs	r2, #2
 80045d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10e      	bne.n	80045fa <HAL_RTC_SetDate+0x4e>
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d008      	beq.n	80045fa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	785b      	ldrb	r3, [r3, #1]
 80045ec:	f023 0310 	bic.w	r3, r3, #16
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	330a      	adds	r3, #10
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d11c      	bne.n	800463a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	78db      	ldrb	r3, [r3, #3]
 8004604:	4618      	mov	r0, r3
 8004606:	f000 f8ef 	bl	80047e8 <RTC_ByteToBcd2>
 800460a:	4603      	mov	r3, r0
 800460c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	785b      	ldrb	r3, [r3, #1]
 8004612:	4618      	mov	r0, r3
 8004614:	f000 f8e8 	bl	80047e8 <RTC_ByteToBcd2>
 8004618:	4603      	mov	r3, r0
 800461a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800461c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	789b      	ldrb	r3, [r3, #2]
 8004622:	4618      	mov	r0, r3
 8004624:	f000 f8e0 	bl	80047e8 <RTC_ByteToBcd2>
 8004628:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800462a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	e00e      	b.n	8004658 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	78db      	ldrb	r3, [r3, #3]
 800463e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	785b      	ldrb	r3, [r3, #1]
 8004644:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004646:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800464c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004658:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <HAL_RTC_SetDate+0x108>)
 800465a:	22ca      	movs	r2, #202	; 0xca
 800465c:	625a      	str	r2, [r3, #36]	; 0x24
 800465e:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <HAL_RTC_SetDate+0x108>)
 8004660:	2253      	movs	r2, #83	; 0x53
 8004662:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f84d 	bl	8004704 <RTC_EnterInitMode>
 800466a:	4603      	mov	r3, r0
 800466c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800466e:	7cfb      	ldrb	r3, [r7, #19]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10b      	bne.n	800468c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8004674:	4a0f      	ldr	r2, [pc, #60]	; (80046b4 <HAL_RTC_SetDate+0x108>)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800467c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004680:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 f872 	bl	800476c <RTC_ExitInitMode>
 8004688:	4603      	mov	r3, r0
 800468a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800468c:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <HAL_RTC_SetDate+0x108>)
 800468e:	22ff      	movs	r2, #255	; 0xff
 8004690:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004692:	7cfb      	ldrb	r3, [r7, #19]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d103      	bne.n	80046a0 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80046a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd90      	pop	{r4, r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40002800 	.word	0x40002800

080046b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80046c0:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <HAL_RTC_WaitForSynchro+0x48>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4a0e      	ldr	r2, [pc, #56]	; (8004700 <HAL_RTC_WaitForSynchro+0x48>)
 80046c6:	f023 0320 	bic.w	r3, r3, #32
 80046ca:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80046cc:	f7fc fd38 	bl	8001140 <HAL_GetTick>
 80046d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80046d2:	e009      	b.n	80046e8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046d4:	f7fc fd34 	bl	8001140 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046e2:	d901      	bls.n	80046e8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e006      	b.n	80046f6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_RTC_WaitForSynchro+0x48>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0320 	and.w	r3, r3, #32
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0ef      	beq.n	80046d4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40002800 	.word	0x40002800

08004704 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004710:	4b15      	ldr	r3, [pc, #84]	; (8004768 <RTC_EnterInitMode+0x64>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004718:	2b00      	cmp	r3, #0
 800471a:	d120      	bne.n	800475e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800471c:	4b12      	ldr	r3, [pc, #72]	; (8004768 <RTC_EnterInitMode+0x64>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4a11      	ldr	r2, [pc, #68]	; (8004768 <RTC_EnterInitMode+0x64>)
 8004722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004726:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004728:	f7fc fd0a 	bl	8001140 <HAL_GetTick>
 800472c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800472e:	e00d      	b.n	800474c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004730:	f7fc fd06 	bl	8001140 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800473e:	d905      	bls.n	800474c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2203      	movs	r2, #3
 8004748:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800474c:	4b06      	ldr	r3, [pc, #24]	; (8004768 <RTC_EnterInitMode+0x64>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d102      	bne.n	800475e <RTC_EnterInitMode+0x5a>
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	2b03      	cmp	r3, #3
 800475c:	d1e8      	bne.n	8004730 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800475e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40002800 	.word	0x40002800

0800476c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004778:	4b1a      	ldr	r3, [pc, #104]	; (80047e4 <RTC_ExitInitMode+0x78>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <RTC_ExitInitMode+0x78>)
 800477e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004782:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004784:	4b17      	ldr	r3, [pc, #92]	; (80047e4 <RTC_ExitInitMode+0x78>)
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10c      	bne.n	80047aa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ff91 	bl	80046b8 <HAL_RTC_WaitForSynchro>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01e      	beq.n	80047da <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2203      	movs	r2, #3
 80047a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	73fb      	strb	r3, [r7, #15]
 80047a8:	e017      	b.n	80047da <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80047aa:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <RTC_ExitInitMode+0x78>)
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	4a0d      	ldr	r2, [pc, #52]	; (80047e4 <RTC_ExitInitMode+0x78>)
 80047b0:	f023 0320 	bic.w	r3, r3, #32
 80047b4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff ff7e 	bl	80046b8 <HAL_RTC_WaitForSynchro>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d005      	beq.n	80047ce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2203      	movs	r2, #3
 80047c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80047ce:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <RTC_ExitInitMode+0x78>)
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	4a04      	ldr	r2, [pc, #16]	; (80047e4 <RTC_ExitInitMode+0x78>)
 80047d4:	f043 0320 	orr.w	r3, r3, #32
 80047d8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80047da:	7bfb      	ldrb	r3, [r7, #15]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40002800 	.word	0x40002800

080047e8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80047fa:	e005      	b.n	8004808 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3301      	adds	r3, #1
 8004800:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8004802:	7afb      	ldrb	r3, [r7, #11]
 8004804:	3b0a      	subs	r3, #10
 8004806:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004808:	7afb      	ldrb	r3, [r7, #11]
 800480a:	2b09      	cmp	r3, #9
 800480c:	d8f6      	bhi.n	80047fc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	b2da      	uxtb	r2, r3
 8004816:	7afb      	ldrb	r3, [r7, #11]
 8004818:	4313      	orrs	r3, r2
 800481a:	b2db      	uxtb	r3, r3
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	490f      	ldr	r1, [pc, #60]	; (8004878 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 800483c:	4313      	orrs	r3, r2
 800483e:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	490c      	ldr	r1, [pc, #48]	; (800487c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800484a:	4313      	orrs	r3, r2
 800484c:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 800484e:	4b0b      	ldr	r3, [pc, #44]	; (800487c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6919      	ldr	r1, [r3, #16]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	430b      	orrs	r3, r1
 8004862:	4906      	ldr	r1, [pc, #24]	; (800487c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004864:	4313      	orrs	r3, r2
 8004866:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40002800 	.word	0x40002800
 800487c:	40003400 	.word	0x40003400

08004880 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e042      	b.n	8004918 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7fc f9cf 	bl	8000c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2224      	movs	r2, #36	; 0x24
 80048ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0201 	bic.w	r2, r2, #1
 80048c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f82c 	bl	8004920 <UART_SetConfig>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e022      	b.n	8004918 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 faee 	bl	8004ebc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fb75 	bl	8005000 <UART_CheckIdleState>
 8004916:	4603      	mov	r3, r0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004920:	b5b0      	push	{r4, r5, r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	4313      	orrs	r3, r2
 8004942:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4bb1      	ldr	r3, [pc, #708]	; (8004c10 <UART_SetConfig+0x2f0>)
 800494c:	4013      	ands	r3, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	69f9      	ldr	r1, [r7, #28]
 8004954:	430b      	orrs	r3, r1
 8004956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4aa6      	ldr	r2, [pc, #664]	; (8004c14 <UART_SetConfig+0x2f4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d004      	beq.n	8004988 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	4313      	orrs	r3, r2
 8004986:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004992:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6812      	ldr	r2, [r2, #0]
 800499a:	69f9      	ldr	r1, [r7, #28]
 800499c:	430b      	orrs	r3, r1
 800499e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	f023 010f 	bic.w	r1, r3, #15
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a97      	ldr	r2, [pc, #604]	; (8004c18 <UART_SetConfig+0x2f8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d120      	bne.n	8004a02 <UART_SetConfig+0xe2>
 80049c0:	4b96      	ldr	r3, [pc, #600]	; (8004c1c <UART_SetConfig+0x2fc>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d816      	bhi.n	80049fc <UART_SetConfig+0xdc>
 80049ce:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <UART_SetConfig+0xb4>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	080049e5 	.word	0x080049e5
 80049d8:	080049f1 	.word	0x080049f1
 80049dc:	080049eb 	.word	0x080049eb
 80049e0:	080049f7 	.word	0x080049f7
 80049e4:	2301      	movs	r3, #1
 80049e6:	76fb      	strb	r3, [r7, #27]
 80049e8:	e0e7      	b.n	8004bba <UART_SetConfig+0x29a>
 80049ea:	2302      	movs	r3, #2
 80049ec:	76fb      	strb	r3, [r7, #27]
 80049ee:	e0e4      	b.n	8004bba <UART_SetConfig+0x29a>
 80049f0:	2304      	movs	r3, #4
 80049f2:	76fb      	strb	r3, [r7, #27]
 80049f4:	e0e1      	b.n	8004bba <UART_SetConfig+0x29a>
 80049f6:	2308      	movs	r3, #8
 80049f8:	76fb      	strb	r3, [r7, #27]
 80049fa:	e0de      	b.n	8004bba <UART_SetConfig+0x29a>
 80049fc:	2310      	movs	r3, #16
 80049fe:	76fb      	strb	r3, [r7, #27]
 8004a00:	e0db      	b.n	8004bba <UART_SetConfig+0x29a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a86      	ldr	r2, [pc, #536]	; (8004c20 <UART_SetConfig+0x300>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d132      	bne.n	8004a72 <UART_SetConfig+0x152>
 8004a0c:	4b83      	ldr	r3, [pc, #524]	; (8004c1c <UART_SetConfig+0x2fc>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b0c      	cmp	r3, #12
 8004a18:	d828      	bhi.n	8004a6c <UART_SetConfig+0x14c>
 8004a1a:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <UART_SetConfig+0x100>)
 8004a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a20:	08004a55 	.word	0x08004a55
 8004a24:	08004a6d 	.word	0x08004a6d
 8004a28:	08004a6d 	.word	0x08004a6d
 8004a2c:	08004a6d 	.word	0x08004a6d
 8004a30:	08004a61 	.word	0x08004a61
 8004a34:	08004a6d 	.word	0x08004a6d
 8004a38:	08004a6d 	.word	0x08004a6d
 8004a3c:	08004a6d 	.word	0x08004a6d
 8004a40:	08004a5b 	.word	0x08004a5b
 8004a44:	08004a6d 	.word	0x08004a6d
 8004a48:	08004a6d 	.word	0x08004a6d
 8004a4c:	08004a6d 	.word	0x08004a6d
 8004a50:	08004a67 	.word	0x08004a67
 8004a54:	2300      	movs	r3, #0
 8004a56:	76fb      	strb	r3, [r7, #27]
 8004a58:	e0af      	b.n	8004bba <UART_SetConfig+0x29a>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	76fb      	strb	r3, [r7, #27]
 8004a5e:	e0ac      	b.n	8004bba <UART_SetConfig+0x29a>
 8004a60:	2304      	movs	r3, #4
 8004a62:	76fb      	strb	r3, [r7, #27]
 8004a64:	e0a9      	b.n	8004bba <UART_SetConfig+0x29a>
 8004a66:	2308      	movs	r3, #8
 8004a68:	76fb      	strb	r3, [r7, #27]
 8004a6a:	e0a6      	b.n	8004bba <UART_SetConfig+0x29a>
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	76fb      	strb	r3, [r7, #27]
 8004a70:	e0a3      	b.n	8004bba <UART_SetConfig+0x29a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a6b      	ldr	r2, [pc, #428]	; (8004c24 <UART_SetConfig+0x304>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d120      	bne.n	8004abe <UART_SetConfig+0x19e>
 8004a7c:	4b67      	ldr	r3, [pc, #412]	; (8004c1c <UART_SetConfig+0x2fc>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a86:	2b30      	cmp	r3, #48	; 0x30
 8004a88:	d013      	beq.n	8004ab2 <UART_SetConfig+0x192>
 8004a8a:	2b30      	cmp	r3, #48	; 0x30
 8004a8c:	d814      	bhi.n	8004ab8 <UART_SetConfig+0x198>
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	d009      	beq.n	8004aa6 <UART_SetConfig+0x186>
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d810      	bhi.n	8004ab8 <UART_SetConfig+0x198>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <UART_SetConfig+0x180>
 8004a9a:	2b10      	cmp	r3, #16
 8004a9c:	d006      	beq.n	8004aac <UART_SetConfig+0x18c>
 8004a9e:	e00b      	b.n	8004ab8 <UART_SetConfig+0x198>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	76fb      	strb	r3, [r7, #27]
 8004aa4:	e089      	b.n	8004bba <UART_SetConfig+0x29a>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	76fb      	strb	r3, [r7, #27]
 8004aaa:	e086      	b.n	8004bba <UART_SetConfig+0x29a>
 8004aac:	2304      	movs	r3, #4
 8004aae:	76fb      	strb	r3, [r7, #27]
 8004ab0:	e083      	b.n	8004bba <UART_SetConfig+0x29a>
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	76fb      	strb	r3, [r7, #27]
 8004ab6:	e080      	b.n	8004bba <UART_SetConfig+0x29a>
 8004ab8:	2310      	movs	r3, #16
 8004aba:	76fb      	strb	r3, [r7, #27]
 8004abc:	e07d      	b.n	8004bba <UART_SetConfig+0x29a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a59      	ldr	r2, [pc, #356]	; (8004c28 <UART_SetConfig+0x308>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d120      	bne.n	8004b0a <UART_SetConfig+0x1ea>
 8004ac8:	4b54      	ldr	r3, [pc, #336]	; (8004c1c <UART_SetConfig+0x2fc>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ace:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ad2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad4:	d013      	beq.n	8004afe <UART_SetConfig+0x1de>
 8004ad6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad8:	d814      	bhi.n	8004b04 <UART_SetConfig+0x1e4>
 8004ada:	2b80      	cmp	r3, #128	; 0x80
 8004adc:	d009      	beq.n	8004af2 <UART_SetConfig+0x1d2>
 8004ade:	2b80      	cmp	r3, #128	; 0x80
 8004ae0:	d810      	bhi.n	8004b04 <UART_SetConfig+0x1e4>
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <UART_SetConfig+0x1cc>
 8004ae6:	2b40      	cmp	r3, #64	; 0x40
 8004ae8:	d006      	beq.n	8004af8 <UART_SetConfig+0x1d8>
 8004aea:	e00b      	b.n	8004b04 <UART_SetConfig+0x1e4>
 8004aec:	2300      	movs	r3, #0
 8004aee:	76fb      	strb	r3, [r7, #27]
 8004af0:	e063      	b.n	8004bba <UART_SetConfig+0x29a>
 8004af2:	2302      	movs	r3, #2
 8004af4:	76fb      	strb	r3, [r7, #27]
 8004af6:	e060      	b.n	8004bba <UART_SetConfig+0x29a>
 8004af8:	2304      	movs	r3, #4
 8004afa:	76fb      	strb	r3, [r7, #27]
 8004afc:	e05d      	b.n	8004bba <UART_SetConfig+0x29a>
 8004afe:	2308      	movs	r3, #8
 8004b00:	76fb      	strb	r3, [r7, #27]
 8004b02:	e05a      	b.n	8004bba <UART_SetConfig+0x29a>
 8004b04:	2310      	movs	r3, #16
 8004b06:	76fb      	strb	r3, [r7, #27]
 8004b08:	e057      	b.n	8004bba <UART_SetConfig+0x29a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a47      	ldr	r2, [pc, #284]	; (8004c2c <UART_SetConfig+0x30c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d125      	bne.n	8004b60 <UART_SetConfig+0x240>
 8004b14:	4b41      	ldr	r3, [pc, #260]	; (8004c1c <UART_SetConfig+0x2fc>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b22:	d017      	beq.n	8004b54 <UART_SetConfig+0x234>
 8004b24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b28:	d817      	bhi.n	8004b5a <UART_SetConfig+0x23a>
 8004b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2e:	d00b      	beq.n	8004b48 <UART_SetConfig+0x228>
 8004b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b34:	d811      	bhi.n	8004b5a <UART_SetConfig+0x23a>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <UART_SetConfig+0x222>
 8004b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3e:	d006      	beq.n	8004b4e <UART_SetConfig+0x22e>
 8004b40:	e00b      	b.n	8004b5a <UART_SetConfig+0x23a>
 8004b42:	2300      	movs	r3, #0
 8004b44:	76fb      	strb	r3, [r7, #27]
 8004b46:	e038      	b.n	8004bba <UART_SetConfig+0x29a>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	76fb      	strb	r3, [r7, #27]
 8004b4c:	e035      	b.n	8004bba <UART_SetConfig+0x29a>
 8004b4e:	2304      	movs	r3, #4
 8004b50:	76fb      	strb	r3, [r7, #27]
 8004b52:	e032      	b.n	8004bba <UART_SetConfig+0x29a>
 8004b54:	2308      	movs	r3, #8
 8004b56:	76fb      	strb	r3, [r7, #27]
 8004b58:	e02f      	b.n	8004bba <UART_SetConfig+0x29a>
 8004b5a:	2310      	movs	r3, #16
 8004b5c:	76fb      	strb	r3, [r7, #27]
 8004b5e:	e02c      	b.n	8004bba <UART_SetConfig+0x29a>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a2b      	ldr	r2, [pc, #172]	; (8004c14 <UART_SetConfig+0x2f4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d125      	bne.n	8004bb6 <UART_SetConfig+0x296>
 8004b6a:	4b2c      	ldr	r3, [pc, #176]	; (8004c1c <UART_SetConfig+0x2fc>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b78:	d017      	beq.n	8004baa <UART_SetConfig+0x28a>
 8004b7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b7e:	d817      	bhi.n	8004bb0 <UART_SetConfig+0x290>
 8004b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b84:	d00b      	beq.n	8004b9e <UART_SetConfig+0x27e>
 8004b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8a:	d811      	bhi.n	8004bb0 <UART_SetConfig+0x290>
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <UART_SetConfig+0x278>
 8004b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b94:	d006      	beq.n	8004ba4 <UART_SetConfig+0x284>
 8004b96:	e00b      	b.n	8004bb0 <UART_SetConfig+0x290>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	76fb      	strb	r3, [r7, #27]
 8004b9c:	e00d      	b.n	8004bba <UART_SetConfig+0x29a>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	76fb      	strb	r3, [r7, #27]
 8004ba2:	e00a      	b.n	8004bba <UART_SetConfig+0x29a>
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	76fb      	strb	r3, [r7, #27]
 8004ba8:	e007      	b.n	8004bba <UART_SetConfig+0x29a>
 8004baa:	2308      	movs	r3, #8
 8004bac:	76fb      	strb	r3, [r7, #27]
 8004bae:	e004      	b.n	8004bba <UART_SetConfig+0x29a>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	76fb      	strb	r3, [r7, #27]
 8004bb4:	e001      	b.n	8004bba <UART_SetConfig+0x29a>
 8004bb6:	2310      	movs	r3, #16
 8004bb8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a15      	ldr	r2, [pc, #84]	; (8004c14 <UART_SetConfig+0x2f4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	f040 80a3 	bne.w	8004d0c <UART_SetConfig+0x3ec>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bc6:	7efb      	ldrb	r3, [r7, #27]
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d83b      	bhi.n	8004c44 <UART_SetConfig+0x324>
 8004bcc:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <UART_SetConfig+0x2b4>)
 8004bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd2:	bf00      	nop
 8004bd4:	08004bf9 	.word	0x08004bf9
 8004bd8:	08004c01 	.word	0x08004c01
 8004bdc:	08004c09 	.word	0x08004c09
 8004be0:	08004c45 	.word	0x08004c45
 8004be4:	08004c35 	.word	0x08004c35
 8004be8:	08004c45 	.word	0x08004c45
 8004bec:	08004c45 	.word	0x08004c45
 8004bf0:	08004c45 	.word	0x08004c45
 8004bf4:	08004c3d 	.word	0x08004c3d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf8:	f7fe fdb8 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 8004bfc:	6178      	str	r0, [r7, #20]
        break;
 8004bfe:	e026      	b.n	8004c4e <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c00:	f7fe fdc8 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 8004c04:	6178      	str	r0, [r7, #20]
        break;
 8004c06:	e022      	b.n	8004c4e <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c08:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <UART_SetConfig+0x310>)
 8004c0a:	617b      	str	r3, [r7, #20]
        break;
 8004c0c:	e01f      	b.n	8004c4e <UART_SetConfig+0x32e>
 8004c0e:	bf00      	nop
 8004c10:	cfff69f3 	.word	0xcfff69f3
 8004c14:	40008000 	.word	0x40008000
 8004c18:	40013800 	.word	0x40013800
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	40004400 	.word	0x40004400
 8004c24:	40004800 	.word	0x40004800
 8004c28:	40004c00 	.word	0x40004c00
 8004c2c:	40005000 	.word	0x40005000
 8004c30:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c34:	f7fe fce8 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 8004c38:	6178      	str	r0, [r7, #20]
        break;
 8004c3a:	e008      	b.n	8004c4e <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c40:	617b      	str	r3, [r7, #20]
        break;
 8004c42:	e004      	b.n	8004c4e <UART_SetConfig+0x32e>
      default:
        pclk = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	76bb      	strb	r3, [r7, #26]
        break;
 8004c4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 811b 	beq.w	8004e8c <UART_SetConfig+0x56c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	4a96      	ldr	r2, [pc, #600]	; (8004eb4 <UART_SetConfig+0x594>)
 8004c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c60:	461a      	mov	r2, r3
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c68:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	4413      	add	r3, r2
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d305      	bcc.n	8004c86 <UART_SetConfig+0x366>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d902      	bls.n	8004c8c <UART_SetConfig+0x36c>
      {
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	76bb      	strb	r3, [r7, #26]
 8004c8a:	e0ff      	b.n	8004e8c <UART_SetConfig+0x56c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f04f 0100 	mov.w	r1, #0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	4a86      	ldr	r2, [pc, #536]	; (8004eb4 <UART_SetConfig+0x594>)
 8004c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	f7fb fac6 	bl	8000234 <__aeabi_uldivmod>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4610      	mov	r0, r2
 8004cae:	4619      	mov	r1, r3
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	020b      	lsls	r3, r1, #8
 8004cba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cbe:	0202      	lsls	r2, r0, #8
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	6849      	ldr	r1, [r1, #4]
 8004cc4:	0849      	lsrs	r1, r1, #1
 8004cc6:	4608      	mov	r0, r1
 8004cc8:	f04f 0100 	mov.w	r1, #0
 8004ccc:	1814      	adds	r4, r2, r0
 8004cce:	eb43 0501 	adc.w	r5, r3, r1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	4620      	mov	r0, r4
 8004cde:	4629      	mov	r1, r5
 8004ce0:	f7fb faa8 	bl	8000234 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4613      	mov	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cf2:	d308      	bcc.n	8004d06 <UART_SetConfig+0x3e6>
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cfa:	d204      	bcs.n	8004d06 <UART_SetConfig+0x3e6>
        {
          huart->Instance->BRR = usartdiv;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	60da      	str	r2, [r3, #12]
 8004d04:	e0c2      	b.n	8004e8c <UART_SetConfig+0x56c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	76bb      	strb	r3, [r7, #26]
 8004d0a:	e0bf      	b.n	8004e8c <UART_SetConfig+0x56c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d14:	d165      	bne.n	8004de2 <UART_SetConfig+0x4c2>
  {
    switch (clocksource)
 8004d16:	7efb      	ldrb	r3, [r7, #27]
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d828      	bhi.n	8004d6e <UART_SetConfig+0x44e>
 8004d1c:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <UART_SetConfig+0x404>)
 8004d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d22:	bf00      	nop
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d51 	.word	0x08004d51
 8004d2c:	08004d59 	.word	0x08004d59
 8004d30:	08004d6f 	.word	0x08004d6f
 8004d34:	08004d5f 	.word	0x08004d5f
 8004d38:	08004d6f 	.word	0x08004d6f
 8004d3c:	08004d6f 	.word	0x08004d6f
 8004d40:	08004d6f 	.word	0x08004d6f
 8004d44:	08004d67 	.word	0x08004d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d48:	f7fe fd10 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 8004d4c:	6178      	str	r0, [r7, #20]
        break;
 8004d4e:	e013      	b.n	8004d78 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d50:	f7fe fd20 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 8004d54:	6178      	str	r0, [r7, #20]
        break;
 8004d56:	e00f      	b.n	8004d78 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d58:	4b57      	ldr	r3, [pc, #348]	; (8004eb8 <UART_SetConfig+0x598>)
 8004d5a:	617b      	str	r3, [r7, #20]
        break;
 8004d5c:	e00c      	b.n	8004d78 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d5e:	f7fe fc53 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 8004d62:	6178      	str	r0, [r7, #20]
        break;
 8004d64:	e008      	b.n	8004d78 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d6a:	617b      	str	r3, [r7, #20]
        break;
 8004d6c:	e004      	b.n	8004d78 <UART_SetConfig+0x458>
      default:
        pclk = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	76bb      	strb	r3, [r7, #26]
        break;
 8004d76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 8086 	beq.w	8004e8c <UART_SetConfig+0x56c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	4a4b      	ldr	r2, [pc, #300]	; (8004eb4 <UART_SetConfig+0x594>)
 8004d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d92:	005a      	lsls	r2, r3, #1
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	085b      	lsrs	r3, r3, #1
 8004d9a:	441a      	add	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2b0f      	cmp	r3, #15
 8004dac:	d916      	bls.n	8004ddc <UART_SetConfig+0x4bc>
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db4:	d212      	bcs.n	8004ddc <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	f023 030f 	bic.w	r3, r3, #15
 8004dbe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	89fb      	ldrh	r3, [r7, #14]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	89fa      	ldrh	r2, [r7, #14]
 8004dd8:	60da      	str	r2, [r3, #12]
 8004dda:	e057      	b.n	8004e8c <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	76bb      	strb	r3, [r7, #26]
 8004de0:	e054      	b.n	8004e8c <UART_SetConfig+0x56c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004de2:	7efb      	ldrb	r3, [r7, #27]
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d828      	bhi.n	8004e3a <UART_SetConfig+0x51a>
 8004de8:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <UART_SetConfig+0x4d0>)
 8004dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dee:	bf00      	nop
 8004df0:	08004e15 	.word	0x08004e15
 8004df4:	08004e1d 	.word	0x08004e1d
 8004df8:	08004e25 	.word	0x08004e25
 8004dfc:	08004e3b 	.word	0x08004e3b
 8004e00:	08004e2b 	.word	0x08004e2b
 8004e04:	08004e3b 	.word	0x08004e3b
 8004e08:	08004e3b 	.word	0x08004e3b
 8004e0c:	08004e3b 	.word	0x08004e3b
 8004e10:	08004e33 	.word	0x08004e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e14:	f7fe fcaa 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 8004e18:	6178      	str	r0, [r7, #20]
        break;
 8004e1a:	e013      	b.n	8004e44 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e1c:	f7fe fcba 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 8004e20:	6178      	str	r0, [r7, #20]
        break;
 8004e22:	e00f      	b.n	8004e44 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e24:	4b24      	ldr	r3, [pc, #144]	; (8004eb8 <UART_SetConfig+0x598>)
 8004e26:	617b      	str	r3, [r7, #20]
        break;
 8004e28:	e00c      	b.n	8004e44 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e2a:	f7fe fbed 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 8004e2e:	6178      	str	r0, [r7, #20]
        break;
 8004e30:	e008      	b.n	8004e44 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e36:	617b      	str	r3, [r7, #20]
        break;
 8004e38:	e004      	b.n	8004e44 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	76bb      	strb	r3, [r7, #26]
        break;
 8004e42:	bf00      	nop
    }

    if (pclk != 0U)
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d020      	beq.n	8004e8c <UART_SetConfig+0x56c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	4a19      	ldr	r2, [pc, #100]	; (8004eb4 <UART_SetConfig+0x594>)
 8004e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e54:	461a      	mov	r2, r3
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	085b      	lsrs	r3, r3, #1
 8004e62:	441a      	add	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2b0f      	cmp	r3, #15
 8004e74:	d908      	bls.n	8004e88 <UART_SetConfig+0x568>
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7c:	d204      	bcs.n	8004e88 <UART_SetConfig+0x568>
      {
        huart->Instance->BRR = usartdiv;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	60da      	str	r2, [r3, #12]
 8004e86:	e001      	b.n	8004e8c <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004ea8:	7ebb      	ldrb	r3, [r7, #26]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3720      	adds	r7, #32
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	0800584c 	.word	0x0800584c
 8004eb8:	00f42400 	.word	0x00f42400

08004ebc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01a      	beq.n	8004fd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fba:	d10a      	bne.n	8004fd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	605a      	str	r2, [r3, #4]
  }
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af02      	add	r7, sp, #8
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005010:	f7fc f896 	bl	8001140 <HAL_GetTick>
 8005014:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b08      	cmp	r3, #8
 8005022:	d10e      	bne.n	8005042 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005024:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f82f 	bl	8005096 <UART_WaitOnFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e025      	b.n	800508e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b04      	cmp	r3, #4
 800504e:	d10e      	bne.n	800506e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005050:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f819 	bl	8005096 <UART_WaitOnFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e00f      	b.n	800508e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	603b      	str	r3, [r7, #0]
 80050a2:	4613      	mov	r3, r2
 80050a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a6:	e062      	b.n	800516e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ae:	d05e      	beq.n	800516e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b0:	f7fc f846 	bl	8001140 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d302      	bcc.n	80050c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d11d      	bne.n	8005102 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0201 	bic.w	r2, r2, #1
 80050e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e045      	b.n	800518e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d02e      	beq.n	800516e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800511a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800511e:	d126      	bne.n	800516e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005128:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005138:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0201 	bic.w	r2, r2, #1
 8005148:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2220      	movs	r2, #32
 800514e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2220      	movs	r2, #32
 8005156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2220      	movs	r2, #32
 800515e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e00f      	b.n	800518e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69da      	ldr	r2, [r3, #28]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4013      	ands	r3, r2
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	429a      	cmp	r2, r3
 800517c:	bf0c      	ite	eq
 800517e:	2301      	moveq	r3, #1
 8005180:	2300      	movne	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	79fb      	ldrb	r3, [r7, #7]
 8005188:	429a      	cmp	r2, r3
 800518a:	d08d      	beq.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005196:	b480      	push	{r7}
 8005198:	b085      	sub	sp, #20
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <HAL_UARTEx_DisableFifoMode+0x16>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e027      	b.n	80051fc <HAL_UARTEx_DisableFifoMode+0x66>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2224      	movs	r2, #36	; 0x24
 80051b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0201 	bic.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80051da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800521c:	2302      	movs	r3, #2
 800521e:	e02d      	b.n	800527c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2224      	movs	r2, #36	; 0x24
 800522c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0201 	bic.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f84f 	bl	8005300 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005294:	2b01      	cmp	r3, #1
 8005296:	d101      	bne.n	800529c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005298:	2302      	movs	r3, #2
 800529a:	e02d      	b.n	80052f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2224      	movs	r2, #36	; 0x24
 80052a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0201 	bic.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f811 	bl	8005300 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800530c:	2b00      	cmp	r3, #0
 800530e:	d108      	bne.n	8005322 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005320:	e031      	b.n	8005386 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005322:	2308      	movs	r3, #8
 8005324:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005326:	2308      	movs	r3, #8
 8005328:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	0e5b      	lsrs	r3, r3, #25
 8005332:	b2db      	uxtb	r3, r3
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	0f5b      	lsrs	r3, r3, #29
 8005342:	b2db      	uxtb	r3, r3
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800534a:	7bbb      	ldrb	r3, [r7, #14]
 800534c:	7b3a      	ldrb	r2, [r7, #12]
 800534e:	4911      	ldr	r1, [pc, #68]	; (8005394 <UARTEx_SetNbDataToProcess+0x94>)
 8005350:	5c8a      	ldrb	r2, [r1, r2]
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	7b3a      	ldrb	r2, [r7, #12]
 8005358:	490f      	ldr	r1, [pc, #60]	; (8005398 <UARTEx_SetNbDataToProcess+0x98>)
 800535a:	5c8a      	ldrb	r2, [r1, r2]
 800535c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005360:	b29a      	uxth	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	7b7a      	ldrb	r2, [r7, #13]
 800536c:	4909      	ldr	r1, [pc, #36]	; (8005394 <UARTEx_SetNbDataToProcess+0x94>)
 800536e:	5c8a      	ldrb	r2, [r1, r2]
 8005370:	fb02 f303 	mul.w	r3, r2, r3
 8005374:	7b7a      	ldrb	r2, [r7, #13]
 8005376:	4908      	ldr	r1, [pc, #32]	; (8005398 <UARTEx_SetNbDataToProcess+0x98>)
 8005378:	5c8a      	ldrb	r2, [r1, r2]
 800537a:	fb93 f3f2 	sdiv	r3, r3, r2
 800537e:	b29a      	uxth	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005386:	bf00      	nop
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	08005864 	.word	0x08005864
 8005398:	0800586c 	.word	0x0800586c

0800539c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800539c:	b480      	push	{r7}
 800539e:	b08b      	sub	sp, #44	; 0x2c
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	fa93 f3a3 	rbit	r3, r3
 80053b6:	613b      	str	r3, [r7, #16]
  return result;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80053c2:	2320      	movs	r3, #32
 80053c4:	e003      	b.n	80053ce <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	fab3 f383 	clz	r3, r3
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	2103      	movs	r1, #3
 80053d2:	fa01 f303 	lsl.w	r3, r1, r3
 80053d6:	43db      	mvns	r3, r3
 80053d8:	401a      	ands	r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	fa93 f3a3 	rbit	r3, r3
 80053e4:	61fb      	str	r3, [r7, #28]
  return result;
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80053f0:	2320      	movs	r3, #32
 80053f2:	e003      	b.n	80053fc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	fab3 f383 	clz	r3, r3
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	fa01 f303 	lsl.w	r3, r1, r3
 8005404:	431a      	orrs	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	601a      	str	r2, [r3, #0]
}
 800540a:	bf00      	nop
 800540c:	372c      	adds	r7, #44	; 0x2c
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005416:	b480      	push	{r7}
 8005418:	b085      	sub	sp, #20
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	43db      	mvns	r3, r3
 800542a:	401a      	ands	r2, r3
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	431a      	orrs	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	605a      	str	r2, [r3, #4]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005446:	b480      	push	{r7}
 8005448:	b08b      	sub	sp, #44	; 0x2c
 800544a:	af00      	add	r7, sp, #0
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	fa93 f3a3 	rbit	r3, r3
 8005460:	613b      	str	r3, [r7, #16]
  return result;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800546c:	2320      	movs	r3, #32
 800546e:	e003      	b.n	8005478 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	fab3 f383 	clz	r3, r3
 8005476:	b2db      	uxtb	r3, r3
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	2103      	movs	r1, #3
 800547c:	fa01 f303 	lsl.w	r3, r1, r3
 8005480:	43db      	mvns	r3, r3
 8005482:	401a      	ands	r2, r3
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	fa93 f3a3 	rbit	r3, r3
 800548e:	61fb      	str	r3, [r7, #28]
  return result;
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800549a:	2320      	movs	r3, #32
 800549c:	e003      	b.n	80054a6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	fab3 f383 	clz	r3, r3
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	fa01 f303 	lsl.w	r3, r1, r3
 80054ae:	431a      	orrs	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80054b4:	bf00      	nop
 80054b6:	372c      	adds	r7, #44	; 0x2c
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b08b      	sub	sp, #44	; 0x2c
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	fa93 f3a3 	rbit	r3, r3
 80054da:	613b      	str	r3, [r7, #16]
  return result;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80054e6:	2320      	movs	r3, #32
 80054e8:	e003      	b.n	80054f2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	fab3 f383 	clz	r3, r3
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	2103      	movs	r1, #3
 80054f6:	fa01 f303 	lsl.w	r3, r1, r3
 80054fa:	43db      	mvns	r3, r3
 80054fc:	401a      	ands	r2, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	fa93 f3a3 	rbit	r3, r3
 8005508:	61fb      	str	r3, [r7, #28]
  return result;
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005514:	2320      	movs	r3, #32
 8005516:	e003      	b.n	8005520 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	fab3 f383 	clz	r3, r3
 800551e:	b2db      	uxtb	r3, r3
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	fa01 f303 	lsl.w	r3, r1, r3
 8005528:	431a      	orrs	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	60da      	str	r2, [r3, #12]
}
 800552e:	bf00      	nop
 8005530:	372c      	adds	r7, #44	; 0x2c
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800553a:	b480      	push	{r7}
 800553c:	b08b      	sub	sp, #44	; 0x2c
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	fa93 f3a3 	rbit	r3, r3
 8005554:	613b      	str	r3, [r7, #16]
  return result;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005560:	2320      	movs	r3, #32
 8005562:	e003      	b.n	800556c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	fab3 f383 	clz	r3, r3
 800556a:	b2db      	uxtb	r3, r3
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	210f      	movs	r1, #15
 8005570:	fa01 f303 	lsl.w	r3, r1, r3
 8005574:	43db      	mvns	r3, r3
 8005576:	401a      	ands	r2, r3
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	fa93 f3a3 	rbit	r3, r3
 8005582:	61fb      	str	r3, [r7, #28]
  return result;
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800558e:	2320      	movs	r3, #32
 8005590:	e003      	b.n	800559a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	fab3 f383 	clz	r3, r3
 8005598:	b2db      	uxtb	r3, r3
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	fa01 f303 	lsl.w	r3, r1, r3
 80055a2:	431a      	orrs	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80055a8:	bf00      	nop
 80055aa:	372c      	adds	r7, #44	; 0x2c
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b08b      	sub	sp, #44	; 0x2c
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	0a1b      	lsrs	r3, r3, #8
 80055c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	fa93 f3a3 	rbit	r3, r3
 80055d0:	613b      	str	r3, [r7, #16]
  return result;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80055dc:	2320      	movs	r3, #32
 80055de:	e003      	b.n	80055e8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	fab3 f383 	clz	r3, r3
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	210f      	movs	r1, #15
 80055ec:	fa01 f303 	lsl.w	r3, r1, r3
 80055f0:	43db      	mvns	r3, r3
 80055f2:	401a      	ands	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	0a1b      	lsrs	r3, r3, #8
 80055f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	fa93 f3a3 	rbit	r3, r3
 8005600:	61fb      	str	r3, [r7, #28]
  return result;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800560c:	2320      	movs	r3, #32
 800560e:	e003      	b.n	8005618 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	fab3 f383 	clz	r3, r3
 8005616:	b2db      	uxtb	r3, r3
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	fa01 f303 	lsl.w	r3, r1, r3
 8005620:	431a      	orrs	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005626:	bf00      	nop
 8005628:	372c      	adds	r7, #44	; 0x2c
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b088      	sub	sp, #32
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	fa93 f3a3 	rbit	r3, r3
 8005648:	60fb      	str	r3, [r7, #12]
  return result;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <LL_GPIO_Init+0x26>
    return 32U;
 8005654:	2320      	movs	r3, #32
 8005656:	e003      	b.n	8005660 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	fab3 f383 	clz	r3, r3
 800565e:	b2db      	uxtb	r3, r3
 8005660:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005662:	e047      	b.n	80056f4 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	2101      	movs	r1, #1
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	fa01 f303 	lsl.w	r3, r1, r3
 8005670:	4013      	ands	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d039      	beq.n	80056ee <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d003      	beq.n	800568a <LL_GPIO_Init+0x58>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b02      	cmp	r3, #2
 8005688:	d10d      	bne.n	80056a6 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	461a      	mov	r2, r3
 8005690:	69b9      	ldr	r1, [r7, #24]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff fed7 	bl	8005446 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	461a      	mov	r2, r3
 800569e:	69b9      	ldr	r1, [r7, #24]
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff feb8 	bl	8005416 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	461a      	mov	r2, r3
 80056ac:	69b9      	ldr	r1, [r7, #24]
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff ff06 	bl	80054c0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d111      	bne.n	80056e0 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	2bff      	cmp	r3, #255	; 0xff
 80056c0:	d807      	bhi.n	80056d2 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	461a      	mov	r2, r3
 80056c8:	69b9      	ldr	r1, [r7, #24]
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff ff35 	bl	800553a <LL_GPIO_SetAFPin_0_7>
 80056d0:	e006      	b.n	80056e0 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	461a      	mov	r2, r3
 80056d8:	69b9      	ldr	r1, [r7, #24]
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7ff ff6a 	bl	80055b4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	461a      	mov	r2, r3
 80056e6:	69b9      	ldr	r1, [r7, #24]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff fe57 	bl	800539c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	3301      	adds	r3, #1
 80056f2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	fa22 f303 	lsr.w	r3, r2, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1b0      	bne.n	8005664 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3720      	adds	r7, #32
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005714:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005718:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	b29b      	uxth	r3, r3
 8005726:	43db      	mvns	r3, r3
 8005728:	b29b      	uxth	r3, r3
 800572a:	4013      	ands	r3, r2
 800572c:	b29a      	uxth	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005742:	b084      	sub	sp, #16
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	f107 0014 	add.w	r0, r7, #20
 8005750:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	b004      	add	sp, #16
 8005782:	4770      	bx	lr

08005784 <__libc_init_array>:
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	4d0d      	ldr	r5, [pc, #52]	; (80057bc <__libc_init_array+0x38>)
 8005788:	2600      	movs	r6, #0
 800578a:	4c0d      	ldr	r4, [pc, #52]	; (80057c0 <__libc_init_array+0x3c>)
 800578c:	1b64      	subs	r4, r4, r5
 800578e:	10a4      	asrs	r4, r4, #2
 8005790:	42a6      	cmp	r6, r4
 8005792:	d109      	bne.n	80057a8 <__libc_init_array+0x24>
 8005794:	4d0b      	ldr	r5, [pc, #44]	; (80057c4 <__libc_init_array+0x40>)
 8005796:	2600      	movs	r6, #0
 8005798:	4c0b      	ldr	r4, [pc, #44]	; (80057c8 <__libc_init_array+0x44>)
 800579a:	f000 f81f 	bl	80057dc <_init>
 800579e:	1b64      	subs	r4, r4, r5
 80057a0:	10a4      	asrs	r4, r4, #2
 80057a2:	42a6      	cmp	r6, r4
 80057a4:	d105      	bne.n	80057b2 <__libc_init_array+0x2e>
 80057a6:	bd70      	pop	{r4, r5, r6, pc}
 80057a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ac:	3601      	adds	r6, #1
 80057ae:	4798      	blx	r3
 80057b0:	e7ee      	b.n	8005790 <__libc_init_array+0xc>
 80057b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057b6:	3601      	adds	r6, #1
 80057b8:	4798      	blx	r3
 80057ba:	e7f2      	b.n	80057a2 <__libc_init_array+0x1e>
 80057bc:	0800587c 	.word	0x0800587c
 80057c0:	0800587c 	.word	0x0800587c
 80057c4:	0800587c 	.word	0x0800587c
 80057c8:	08005880 	.word	0x08005880

080057cc <memset>:
 80057cc:	4402      	add	r2, r0
 80057ce:	4603      	mov	r3, r0
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d100      	bne.n	80057d6 <memset+0xa>
 80057d4:	4770      	bx	lr
 80057d6:	f803 1b01 	strb.w	r1, [r3], #1
 80057da:	e7f9      	b.n	80057d0 <memset+0x4>

080057dc <_init>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	bf00      	nop
 80057e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e2:	bc08      	pop	{r3}
 80057e4:	469e      	mov	lr, r3
 80057e6:	4770      	bx	lr

080057e8 <_fini>:
 80057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ea:	bf00      	nop
 80057ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ee:	bc08      	pop	{r3}
 80057f0:	469e      	mov	lr, r3
 80057f2:	4770      	bx	lr
